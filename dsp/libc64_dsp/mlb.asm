;******************************************************************************
;* TMS320C6x C/C++ Codegen                                        Unix v7.4.5 *
;* Date/Time created: Wed Dec 11 20:04:09 2013                                *
;******************************************************************************
	.compiler_opts --abi=coffabi --c64p_l1d_workaround=default --endian=little --hll_source=on --long_precision_bits=40 --mem_model:code=near --mem_model:const=data --mem_model:data=far_aggregates --object_format=coff --silicon_version=6500 --symdebug:none 

;******************************************************************************
;* GLOBAL FILE PARAMETERS                                                     *
;*                                                                            *
;*   Architecture      : TMS320C64x+                                          *
;*   Optimization      : Enabled at level 0                                   *
;*   Optimizing for    : Compile time, Ease of Development                    *
;*                       Based on options: -o0, no -ms                        *
;*   Endian            : Little                                               *
;*   Interrupt Thrshld : Disabled                                             *
;*   Data Access Model : Far Aggregate Data                                   *
;*   Pipelining        : Disabled                                             *
;*   Memory Aliases    : Presume are aliases (pessimistic)                    *
;*   Debug Info        : No Debug Info                                        *
;*                                                                            *
;******************************************************************************

	.asg	A15, FP
	.asg	B14, DP
	.asg	B15, SP
	.global	$bss

;*****************************************************************************
;* CINIT RECORDS                                                             *
;*****************************************************************************
	.sect	".cinit"
	.align	8
	.field  	$C$IR_1,32
	.field  	_component_mlb+0,32
	.bits	0,32			; _component_mlb._fxns._init @ 0
	.bits	_loc_mlb_exec,32		; _component_mlb._fxns._exec @ 32
	.bits	_loc_mlb_exec_fc,32		; _component_mlb._fxns._exec_fc @ 64
	.bits	0,32			; _component_mlb._fxns._exit @ 96
	.bits	99,8			; _component_mlb._name[0] @ 128
	.bits	111,8			; _component_mlb._name[1] @ 136
	.bits	114,8			; _component_mlb._name[2] @ 144
	.bits	101,8			; _component_mlb._name[3] @ 152
	.bits	0,8			; _component_mlb._name[4] @ 160
	.space	19
	.bits	0,32			; _component_mlb._component_id @ 320
$C$IR_1:	.set	44

	.global	_mlb_sram
_mlb_sram:	.usect	".sec_mlb_sram",49152,32
	.global	_syscalls
_syscalls:	.usect	".sec_mlb_syscalls",216,4
_mlb_task_attrs:	.usect	".far",28,4
	.bss	_num_irqs,4,4
	.bss	_num_msg_recvd,4,4
_mlb_inbox:	.usect	".far",16,8
_components:	.usect	".far",2496,8
	.bss	_num_core_components,4,4
	.global	_tmpxxx
	.bss	_tmpxxx,4,4
	.sect	".const:_overlay_sections"
	.clink
	.align	8
_overlay_sections:
	.bits	-2044723200,32			; _overlay_sections[0]._phys_addr @ 0
	.bits	0,32			; _overlay_sections[0]._virt_addr @ 32
	.bits	262144,32			; _overlay_sections[0]._size @ 64
	.bits	-2044461056,32			; _overlay_sections[1]._phys_addr @ 96
	.bits	0,32			; _overlay_sections[1]._virt_addr @ 128
	.bits	262144,32			; _overlay_sections[1]._size @ 160
	.bits	-2044198912,32			; _overlay_sections[2]._phys_addr @ 192
	.bits	0,32			; _overlay_sections[2]._virt_addr @ 224
	.bits	262144,32			; _overlay_sections[2]._size @ 256
	.bits	-2043936768,32			; _overlay_sections[3]._phys_addr @ 288
	.bits	0,32			; _overlay_sections[3]._virt_addr @ 320
	.bits	262144,32			; _overlay_sections[3]._size @ 352
	.bits	-2043674624,32			; _overlay_sections[4]._phys_addr @ 384
	.bits	0,32			; _overlay_sections[4]._virt_addr @ 416
	.bits	1048576,32			; _overlay_sections[4]._size @ 448

	.global	_mlb_logbuf
	.bss	_mlb_logbuf,4,4
	.global	_mlb_logbuf_offset_writep
	.bss	_mlb_logbuf_offset_writep,4,4
_component_mlb:	.usect	".far",52,4
;	opt6x /tmp/14914ZWyLXn /tmp/149147fu2yP 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: strncpy                                                     *
;*                                                                            *
;*   Regs Modified     : A0,A3,A4,A5,B0,B1                                    *
;*   Regs Used         : A0,A3,A4,A5,A6,B0,B1,B3,B4                           *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_strncpy:
;** --------------------------------------------------------------------------*
;** 134	-----------------------    if ( !n ) goto g8;

           MV      .L2X    A6,B0             ; |133| 
||         MV      .L1X    B4,A5             ; |133| 
||         MV      .S1     A4,A3             ; |133| 

   [!B0]   BNOP    .S1     $C$L3,5           ; |134| 
|| [ B0]   LDB     .D1T1   *A5++,A0          ; |138| 

           ; BRANCHCC OCCURS {$C$L3}         ; |134| 
;** --------------------------------------------------------------------------*
;** 136	-----------------------    d = dest;
;** 137	-----------------------    s = src;
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
$C$L1:    
;**	-----------------------g3:
;** 138	-----------------------    if ( !(*d++ = *s++) ) goto g5;
;** 138	-----------------------    if ( --n ) goto g3;
;** --------------------------------------------------------------------------*

   [ A0]   SUB     .L2     B0,1,B0           ; |138| 
||         STB     .D1T1   A0,*A4++          ; |138| 

           MV      .L2     B0,B1             ; |138| 
   [!A0]   ZERO    .L2     B1                ; |138| 

   [ B1]   BNOP    .S1     $C$L1,5           ; |138| 
|| [ B1]   LDB     .D1T1   *A5++,A0          ; |138| 
|| [!B1]   CMPGTU  .L2     B0,1,B1           ; |139| 

           ; BRANCHCC OCCURS {$C$L1}         ; |138| 
;** --------------------------------------------------------------------------*
;**	-----------------------g5:
;** 139	-----------------------    if ( n-- <= 1u ) goto g8;

   [!B1]   BNOP    .S1     $C$L3,5           ; |139| 
||         SUB     .L2     B0,1,B0           ; |139| 

           ; BRANCHCC OCCURS {$C$L3}         ; |139| 
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
$C$L2:    
;**	-----------------------g7:
;** 139	-----------------------    *d++ = 0;
;** 139	-----------------------    if ( --n ) goto g7;

           SUB     .L2     B0,1,B0           ; |139| 
||         ZERO    .L1     A5                ; |139| 

   [ B0]   BNOP    .S1     $C$L2,5           ; |139| 
||         STB     .D1T1   A5,*A4++          ; |139| 

           ; BRANCHCC OCCURS {$C$L2}         ; |139| 
;** --------------------------------------------------------------------------*
$C$L3:    
;**	-----------------------g8:
;** 141	-----------------------    return dest;
           RETNOP  .S2     B3,4              ; |142| 
           MV      .L1     A3,A4             ; |141| 
           ; BRANCH OCCURS {B3}              ; |142| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: strchr                                                      *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,B4                                    *
;*   Regs Used         : A0,A1,A2,A3,A4,B3,B4                                 *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_strchr:
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
;** 178	-----------------------    ch = c;
;** 179	-----------------------    s = string;
;**	-----------------------g2:
;** 183	-----------------------    if ( (tch = *s) != ch ) goto g4;
;** 183	-----------------------    return s;
;**	-----------------------g4:
;** 184	-----------------------    if ( tch ) goto g6;
;** 184	-----------------------    return NULL;
;**	-----------------------g6:
;** 185	-----------------------    ++s;
;** 186	-----------------------    goto g2;
           LDB     .D1T1   *A4,A0            ; |183| 
           MV      .L1X    B4,A3             ; |177| 
           EXT     .S1     A3,24,24,A3       ; |178| 
           NOP             2
;** --------------------------------------------------------------------------*
;**   BEGIN LOOP $C$L4
;** --------------------------------------------------------------------------*
$C$L4:    
           CMPEQ   .L1     A0,A3,A1          ; |183| 

   [ A1]   MVK     .L1     0x1,A0
|| [ A1]   MV      .L2X    A4,B4             ; |183| 

           MV      .L1     A0,A2
|| [!A0]   ZERO    .L2     B4                ; |184| 

   [ A1]   ZERO    .L1     A2

   [ A2]   B       .S1     $C$L4             ; |186| 
|| [ A2]   ADD     .L1     1,A4,A4           ; |185| 
|| [!A2]   MV      .D1X    B4,A4             ; |186| 

   [!A2]   RETNOP  .S2     B3,4              ; |187| 
|| [ A2]   LDB     .D1T1   *A4,A0            ; |183| 

           ; BRANCHCC OCCURS {$C$L4}         ; |186| 
;** --------------------------------------------------------------------------*
           NOP             1
           ; BRANCH OCCURS {B3}              ; |187| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: strrchr                                                     *
;*                                                                            *
;*   Regs Modified     : A0,A1,A3,A4,A5,A6                                    *
;*   Regs Used         : A0,A1,A3,A4,A5,A6,B3,B4                              *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_strrchr:
;** --------------------------------------------------------------------------*
;** 193	-----------------------    ch = c;
;** 194	-----------------------    result = NULL;
;** 195	-----------------------    s = string;
           LDB     .D1T1   *A4,A0            ; |199| 
           MV      .L1X    B4,A3             ; |192| 
           EXT     .S1     A3,24,24,A6       ; |193| 
           ZERO    .L1     A5                ; |194| 
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
$C$L5:    
;**	-----------------------g2:
;** 199	-----------------------    if ( (tch = *s) != ch ) goto g4;
;** 199	-----------------------    result = s;
;**	-----------------------g4:
;** 200	-----------------------    if ( tch ) goto g6;
;** 204	-----------------------    return result;
;**	-----------------------g6:
;** 201	-----------------------    ++s;
;** 202	-----------------------    goto g2;
           NOP             1
;** --------------------------------------------------------------------------*

           CMPEQ   .L1     A0,A6,A1          ; |199| 
|| [ A0]   B       .S1     $C$L5             ; |202| 

   [ A1]   MV      .L1     A4,A5             ; |199| 
|| [ A0]   ADD     .S1     1,A4,A4           ; |201| 

   [!A0]   MV      .L1     A5,A3             ; |204| 
|| [ A0]   LDB     .D1T1   *A4,A0            ; |199| 

           NOP             3
           ; BRANCHCC OCCURS {$C$L5}         ; |202| 
;** --------------------------------------------------------------------------*
           RETNOP  .S2     B3,4              ; |205| 
           MV      .L1     A3,A4             ; |202| 
           ; BRANCH OCCURS {B3}              ; |205| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: strncmp                                                     *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,B0,B4,B5                              *
;*   Regs Used         : A0,A1,A2,A3,A4,A6,B0,B3,B4,B5                        *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_strncmp:
;** --------------------------------------------------------------------------*
;** 229	-----------------------    if ( !n ) goto g7;
           MV      .L1     A6,A1             ; |228| 
   [!A1]   BNOP    .S1     $C$L7,4           ; |229| 

           MV      .L1X    B4,A3             ; |228| 
||         MV      .L2X    A4,B5             ; |228| 

           ; BRANCHCC OCCURS {$C$L7}         ; |229| 
;** --------------------------------------------------------------------------*
;** 231	-----------------------    s1 = string1;
;** 232	-----------------------    s2 = string2;
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*      Disqualified loop: Loop contains control code
;*----------------------------------------------------------------------------*
$C$L6:    
;**	-----------------------g3:
;** 237	-----------------------    if ( !(result = (unsigned char)*s1++-(cp = *s2++)) ) goto g5;
;** 238	-----------------------    return result;

           LDBU    .D2T2   *B5++,B4          ; |237| 
||         LDBU    .D1T1   *A3++,A0          ; |237| 

           NOP             4

           SUB     .L1X    B4,A0,A2          ; |237| 
|| [ A0]   SUB     .S1     A1,1,A1           ; |239| 

   [ A2]   B       .S1     $C$L8             ; |238| 
|| [ A2]   MV      .L1     A2,A4             ; |238| 

           MV      .L2X    A2,B0             ; guard predicate rewrite
||         MV      .L1     A1,A2             ; |239| 

   [!A0]   ZERO    .L1     A2                ; |239| 
   [ B0]   ZERO    .L1     A2                ; |239| nullify predicate
   [ A2]   BNOP    .S1     $C$L6,1           ; |239| 
           ; BRANCHCC OCCURS {$C$L8}         ; |238| 
;** --------------------------------------------------------------------------*
;**	-----------------------g5:
;** 239	-----------------------    if ( !cp ) goto g7;
;** 239	-----------------------    if ( --n ) goto g3;
           NOP             4
           ; BRANCHCC OCCURS {$C$L6}         ; |239| 
;** --------------------------------------------------------------------------*
$C$L7:    
;**	-----------------------g7:
;** 241	-----------------------    return 0;
           ZERO    .L1     A4                ; |241| 
;** --------------------------------------------------------------------------*
$C$L8:    
           RETNOP  .S2     B3,5              ; |242| 
           ; BRANCH OCCURS {B3}              ; |242| 
	.sect	".text"
	.clink
	.global	_loc_component_find_by_name

;******************************************************************************
;* FUNCTION NAME: loc_component_find_by_name                                  *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,B0,B1,B2,B4,B5,B6                     *
;*   Regs Used         : A0,A1,A2,A3,A4,B0,B1,B2,B3,B4,B5,B6                  *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_loc_component_find_by_name:
;** --------------------------------------------------------------------------*
;** 120	-----------------------    ret = &components[0];
;** 122	-----------------------    if ( (i = 0u) >= 48u ) goto g11;

           MVK     .S1     48,A3             ; |122| 
||         ZERO    .L1     A0                ; |122| 

           CMPLTU  .L1     A0,A3,A1          ; |122| 
   [!A1]   BNOP    .S1     $C$L16,3          ; |122| 

           MV      .L2     B4,B1             ; |118| 
||         MVKL    .S2     _components,B4

           MVKH    .S2     _components,B4
           ; BRANCHCC OCCURS {$C$L16}        ; |122| 
;** --------------------------------------------------------------------------*
;**   BEGIN LOOP $C$L9
;** --------------------------------------------------------------------------*
$C$L9:    
;**	-----------------------g2:
;** 124	-----------------------    if ( i && (*ret).component_id == 0u ) goto g10;
   [ A0]   LDW     .D2T2   *+B4(40),B0       ; |124| 
           MV      .L1     A4,A3             ; |126| 
   [!A0]   MVK     .L2     0x1,B0            ; |124| 
           ADD     .D2     B4,16,B5          ; |126| 
           NOP             1

           MV      .L2     B0,B2             ; guard predicate rewrite
|| [!B0]   B       .S1     $C$L14            ; |124| 

   [ B2]   LDBU    .D2T2   *B5++,B6          ; |237| 
|| [ B2]   LDBU    .D1T1   *A3++,A1          ; |237| 

           NOP             4
           ; BRANCHCC OCCURS {$C$L14}        ; |124| 
;** --------------------------------------------------------------------------*
;** 126	-----------------------    string1 = (char *)ret+16;
;** 126	-----------------------    string2 = _name;
;** 126	-----------------------    n = 24u;
;** 231	-----------------------    s1 = string1;  // [9]
;** 232	-----------------------    s2 = string2;  // [9]

           MVK     .S2     0x18,B0           ; |126| 
||         SUB     .L1X    B6,A1,A2          ; |237| 

;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*      Disqualified loop: Loop contains control code
;*----------------------------------------------------------------------------*
$C$L10:    
;**	-----------------------g4:
;** 237	-----------------------    if ( result = (unsigned char)*s1++-(cp = *s2++) ) goto g7;  // [9]

   [ A2]   MVK     .L1     0x1,A1            ; nullify predicate
|| [ A2]   B       .S1     $C$L11            ; |237| 

   [!A1]   B       .S1     $C$L12            ; |239| 
   [ A2]   BNOP    .S1     $C$L15,3          ; |238| 
           ; BRANCHCC OCCURS {$C$L11}        ; |237| 
;** --------------------------------------------------------------------------*
;** 239	-----------------------    if ( !cp ) goto g8;  // [9]
   [ A1]   SUB     .L2     B0,1,B0           ; |239| 
           ; BRANCHCC OCCURS {$C$L12}        ; |239| 
;** --------------------------------------------------------------------------*
;** 239	-----------------------    if ( --n ) goto g4;  // [9]

   [ B0]   LDBU    .D1T1   *A3++,A1          ; |237| 
|| [ B0]   LDBU    .D2T2   *B5++,B6          ; |237| 
|| [ B0]   B       .S1     $C$L10            ; |239| 

   [!B0]   BNOP    .S1     $C$L13,3          ; |239| 
           SUB     .L1X    B6,A1,A2          ; |237| 
           ; BRANCHCC OCCURS {$C$L10}        ; |239| 
;** --------------------------------------------------------------------------*
;** 239	-----------------------    goto g8;  // [9]
   [ B1]   LDW     .D2T2   *+B4(48),B5       ; |130| 
           ; BRANCH OCCURS {$C$L13}          ; |239| 
;** --------------------------------------------------------------------------*
$C$L11:    
;**	-----------------------g7:
;** 238	-----------------------    if ( result ) goto g10;  // [9]

   [ A2]   MVK     .S1     48,A3             ; |122| 
|| [ A2]   ADD     .L1     1,A0,A0           ; |122| 

   [ A2]   CMPLTU  .L1     A0,A3,A1          ; |122| 
           ; BRANCHCC OCCURS {$C$L15}        ; |238| 
;** --------------------------------------------------------------------------*
$C$L12:    
   [ B1]   LDW     .D2T2   *+B4(48),B5       ; |130| 
;** --------------------------------------------------------------------------*
$C$L13:    
;**	-----------------------g8:
;** 128	-----------------------    if ( !_bIncRef ) goto g11;
;** 130	-----------------------    (*ret).ref_count = (*ret).ref_count+1;
;** 130	-----------------------    goto g11;

           B       .S2     $C$L17            ; |130| 
||         MVK     .S1     48,A3             ; |142| 

           CMPEQ   .L1     A0,A3,A0          ; |142| 
           RETNOP  .S2     B3,1              ; |148| 
   [ B1]   ADD     .L2     1,B5,B5           ; |130| 

   [ B1]   STW     .D2T2   B5,*+B4(48)       ; |130| 
|| [ A0]   ZERO    .L2     B4                ; |144| 

           ; BRANCH OCCURS {$C$L17}          ; |130| 
;** --------------------------------------------------------------------------*
$C$L14:    

           ADD     .L1     1,A0,A0           ; |122| 
||         MVK     .S1     48,A3             ; |122| 

           CMPLTU  .L1     A0,A3,A1          ; |122| 
;** --------------------------------------------------------------------------*
$C$L15:    
;**	-----------------------g10:
;** 139	-----------------------    ret += 52;
;** 122	-----------------------    if ( (++i) < 48u ) goto g2;

   [ A1]   BNOP    .S1     $C$L9,5           ; |122| 
||         ADDK    .S2     52,B4             ; |139| 

           ; BRANCHCC OCCURS {$C$L9}         ; |122| 
;** --------------------------------------------------------------------------*
$C$L16:    
           RET     .S2     B3                ; |148| 
           MVK     .S1     48,A3             ; |142| 
           CMPEQ   .L1     A0,A3,A0          ; |142| 
   [ A0]   ZERO    .L2     B4                ; |144| 
;** --------------------------------------------------------------------------*
$C$L17:    
;**	-----------------------g11:
;** 142	-----------------------    if ( i != 48u ) goto g13;
;** 144	-----------------------    ret = NULL;
;**	-----------------------g13:
;** 147	-----------------------    return ret;
           NOP             1
           MV      .L1X    B4,A4             ; |147| 
           ; BRANCH OCCURS {B3}              ; |148| 
	.sect	".text"
	.clink
	.global	_loc_component_find_by_id

;******************************************************************************
;* FUNCTION NAME: loc_component_find_by_id                                    *
;*                                                                            *
;*   Regs Modified     : A0,A3,A4,A5,B4                                       *
;*   Regs Used         : A0,A3,A4,A5,B3,B4                                    *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_loc_component_find_by_id:
;** --------------------------------------------------------------------------*
;** 153	-----------------------    ret = &components[0];
;** 155	-----------------------    if ( (unsigned)_id >= 48u ) goto g4;
;** 157	-----------------------    ret += _id*52;
;** 159	-----------------------    if ( NULL != (*ret).fxns.exec ) goto g5;
;** 162	-----------------------    ret = NULL;
;** 163	-----------------------    goto g5;
;**	-----------------------g4:
;** 173	-----------------------    ret = NULL;
;**	-----------------------g5:
;** 176	-----------------------    return ret;

           MVK     .S1     52,A3             ; |157| 
||         MVKL    .S2     _components,B4

           MPYUS   .M1     A4,A3,A3          ; |157| 
||         MVKH    .S2     _components,B4
||         MVK     .S1     48,A5             ; |155| 

           CMPLTU  .L1     A4,A5,A0          ; |155| 
   [ A0]   ADD     .L1X    A3,B4,A4          ; |157| 
   [ A0]   LDW     .D1T1   *+A4(4),A3        ; |159| 
           RETNOP  .S2     B3,3              ; |177| 

   [!A0]   ZERO    .S1     A4                ; |173| 
|| [ A0]   CMPEQ   .L1     0,A3,A0           ; |159| 
|| [!A0]   ZERO    .D1     A0                ; |159| 

   [ A0]   ZERO    .L1     A4                ; |162| 
           ; BRANCH OCCURS {B3}              ; |177| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_mlb_overlay_unregister                                  *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B0,B1,B2,B3,B4,*
;*                           B5,B6,B7,B8,B9,B10,B11,SP,A16,A17,A18,A19,A20,   *
;*                           A21,A22,A23,A24,A25,A26,A27,A28,A29,A30,A31,B16, *
;*                           B17,B18,B19,B20,B21,B22,B23,B24,B25,B26,B27,B28, *
;*                           B29,B30,B31                                      *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B0,B1,B2,B3,B4,*
;*                           B5,B6,B7,B8,B9,B10,B11,DP,SP,A16,A17,A18,A19,A20,*
;*                           A21,A22,A23,A24,A25,A26,A27,A28,A29,A30,A31,B16, *
;*                           B17,B18,B19,B20,B21,B22,B23,B24,B25,B26,B27,B28, *
;*                           B29,B30,B31                                      *
;*   Local Frame Size  : 0 Args + 0 Auto + 24 Save = 24 byte                  *
;******************************************************************************
_loc_mlb_overlay_unregister:
;** --------------------------------------------------------------------------*
;** 184	-----------------------    if ( _sectionIdx >= 5u ) goto g10;

           STW     .D2T1   A11,*SP--(8)      ; |181| 
||         CMPLTU  .L2X    A4,5,B0           ; |184| 
||         MVK     .S1     32,A3             ; |190| 
||         MV      .L1X    B3,A11            ; |181| 

           STDW    .D2T2   B11:B10,*SP--     ; |181| 
|| [!B0]   B       .S1     $C$L23            ; |184| 
||         MVKL    .S2     _components+832,B10
||         MV      .L2X    A4,B11            ; |181| 
||         MVK     .L1     0x4,A4            ; |221| 

           STW     .D2T1   A10,*SP--(8)      ; |181| 
||         ZERO    .L1     A10               ; |190| 
||         MVKH    .S2     _components+832,B10

           CMPLTU  .L1     A10,A3,A0         ; |190| 
   [!B0]   MVK     .L1     0x1,A0            ; nullify predicate
   [!A0]   BNOP    .S1     $C$L22,1          ; |190| 
           ; BRANCHCC OCCURS {$C$L23}        ; |184| 
;** --------------------------------------------------------------------------*
;** 186	-----------------------    comp = &components[16];
;** 190	-----------------------    if ( (i = 0u) >= 32u ) goto g9;
   [ A0]   LDW     .D2T2   *+B10(40),B4      ; |192| 
   [ A0]   LDW     .D2T2   *+B10(44),B5      ; |192| 
           NOP             2
           ; BRANCHCC OCCURS {$C$L22}        ; |190| 
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*      Disqualified loop: Loop contains control code
;*----------------------------------------------------------------------------*
$C$L18:    
;**	-----------------------g3:
;** 192	-----------------------    if ( !(((*comp).component_id != 0u)&(_sectionIdx == (*comp).overlay_section_idx)) ) goto g8;
           NOP             1
           CMPEQ   .L2     B4,0,B4           ; |192| 

           CMPEQ   .L2     B11,B5,B5         ; |192| 
||         XOR     .S2     1,B4,B4           ; |192| 

           AND     .L2     B5,B4,B0          ; |192| 

   [!B0]   BNOP    .S1     $C$L20,4          ; |192| 
|| [ B0]   LDW     .D2T2   *+B10(48),B4      ; |196| 

           SUB     .L2     B4,1,B4           ; |196| 
           ; BRANCHCC OCCURS {$C$L20}        ; |192| 
;** --------------------------------------------------------------------------*
;** 196	-----------------------    (*comp).ref_count = (*comp).ref_count-1;
;** 198	-----------------------    if ( (*comp).ref_count ) goto g8;
           STW     .D2T2   B4,*+B10(48)      ; |196| 
           LDW     .D2T2   *+B10(48),B0      ; |198| 
           MVK     .S1     32,A3             ; |190| 
           NOP             3

   [!B0]   LDW     .D2T2   *+B10(12),B4      ; |200| 
||         MV      .L2     B0,B1             ; branch predicate copy
|| [ B0]   B       .S1     $C$L21            ; |198| 

   [ B1]   ADD     .L1     1,A10,A10         ; |190| 
|| [ B1]   ADDK    .S2     52,B10            ; |213| 

           CMPLTU  .L1     A10,A3,A0         ; |190| 
   [!B1]   ZERO    .L1     A0                ; |190| nullify predicate
   [ A0]   B       .S1     $C$L18            ; |190| 
           CMPEQ   .L2     0,B4,B0           ; |200| 
           ; BRANCHCC OCCURS {$C$L21}        ; |198| 
;** --------------------------------------------------------------------------*
;** 200	-----------------------    if ( NULL == (*comp).fxns.exit ) goto g7;

   [ B0]   BNOP    .S1     $C$L19,2          ; |200| 
|| [!B0]   LDW     .D2T2   *+B10(12),B4      ; |202| 
|| [ B0]   ZERO    .L2     B4                ; |207| 

   [ B0]   STW     .D2T2   B4,*+B10(40)      ; |206| 
   [ B0]   STW     .D2T2   B4,*+B10(4)       ; |207| 
   [!B0]   CALL    .S2     B4                ; |202| 
           ; BRANCHCC OCCURS {$C$L19}        ; |200| 
;** --------------------------------------------------------------------------*
;** 202	-----------------------    (*(*comp).fxns.exit)();
           ADDKPC  .S2     $C$RL0,B3,4       ; |202| 
$C$RL0:    ; CALL OCCURS {B4} {0}            ; |202| 
           ZERO    .L2     B4                ; |207| 
           STW     .D2T2   B4,*+B10(40)      ; |206| 
           STW     .D2T2   B4,*+B10(4)       ; |207| 
;** --------------------------------------------------------------------------*
$C$L19:    
;**	-----------------------g7:
;** 206	-----------------------    (*comp).component_id = 0u;
;** 207	-----------------------    (*comp).fxns.exec = NULL;
;** --------------------------------------------------------------------------*
$C$L20:    

           ADD     .L1     1,A10,A10         ; |190| 
||         MVK     .S1     32,A3             ; |190| 

           CMPLTU  .L1     A10,A3,A0         ; |190| 
   [ A0]   B       .S1     $C$L18            ; |190| 
           ADDK    .S2     52,B10            ; |213| 
;** --------------------------------------------------------------------------*
$C$L21:    
;**	-----------------------g8:
;** 213	-----------------------    comp += 52;
;** 190	-----------------------    if ( (++i) < 32u ) goto g3;
   [ A0]   LDW     .D2T2   *+B10(40),B4      ; |192| 
   [ A0]   LDW     .D2T2   *+B10(44),B5      ; |192| 
           NOP             2
           ; BRANCHCC OCCURS {$C$L18}        ; |190| 
;** --------------------------------------------------------------------------*
$C$L22:    
;**	-----------------------g9:
;** 216	-----------------------    ret = 0u;
;** 217	-----------------------    goto g11;
;**	-----------------------g10:
;** 221	-----------------------    ret = 4u;
;**	-----------------------g11:
;** 224	-----------------------    return ret;
           ZERO    .L1     A4                ; |216| 
;** --------------------------------------------------------------------------*
$C$L23:    

           LDW     .D2T1   *++SP(8),A10      ; |225| 
||         MV      .L2X    A11,B3            ; |225| 

           LDDW    .D2T2   *++SP,B11:B10     ; |225| 
||         RET     .S2     B3                ; |225| 

           LDW     .D2T1   *++SP(8),A11      ; |225| 
           NOP             4
           ; BRANCH OCCURS {B3}              ; |225| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_mlb_overlay_register                                    *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B0,B1, *
;*                           B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B13,SP,A16,A17,  *
;*                           A18,A19,A20,A21,A22,A23,A24,A25,A26,A27,A28,A29, *
;*                           A30,A31,B16,B17,B18,B19,B20,B21,B22,B23,B24,B25, *
;*                           B26,B27,B28,B29,B30,B31                          *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B0,B1, *
;*                           B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B13,DP,SP,A16,   *
;*                           A17,A18,A19,A20,A21,A22,A23,A24,A25,A26,A27,A28, *
;*                           A29,A30,A31,B16,B17,B18,B19,B20,B21,B22,B23,B24, *
;*                           B25,B26,B27,B28,B29,B30,B31                      *
;*   Local Frame Size  : 0 Args + 0 Auto + 32 Save = 32 byte                  *
;******************************************************************************
_loc_mlb_overlay_register:
;** --------------------------------------------------------------------------*
;** 232	-----------------------    if ( _sectionIdx >= 5u ) goto g12;

           CMPLTU  .L2X    A4,5,B0           ; |232| 
||         STW     .D2T2   B13,*SP--(8)      ; |229| 
||         MVK     .S1     32,A3             ; |249| 
||         MV      .S2     B3,B13            ; |229| 

   [!B0]   B       .S1     $C$L28            ; |232| 
||         STDW    .D2T2   B11:B10,*SP--     ; |229| 
||         MVKL    .S2     _components+832,B10
||         MV      .L2     B4,B11            ; |229| 

           MVK     .L1     0x4,A12           ; |312| 
||         MVKH    .S2     _components+832,B10
|| [ B0]   CALL    .S1     _BCACHE_invL1pAll ; |247| 
||         STDW    .D2T1   A13:A12,*SP--     ; |229| 

           MV      .L1     A4,A13            ; |229| 
           STDW    .D2T1   A11:A10,*SP--     ; |229| 
           ZERO    .L1     A11               ; |249| 
           CMPLTU  .L1     A11,A3,A10        ; |249| 
           ; BRANCHCC OCCURS {$C$L28}        ; |232| 
;** --------------------------------------------------------------------------*
;** 234	-----------------------    comp = &components[16];
;** 247	-----------------------    BCACHE_invL1pAll();
;** 249	-----------------------    if ( (i = 0u) >= 32u ) goto g5;
           ADDKPC  .S2     $C$RL1,B3,0       ; |247| 
$C$RL1:    ; CALL OCCURS {_BCACHE_invL1pAll} {0}  ; |247| 
;** --------------------------------------------------------------------------*
           MV      .L1     A10,A0            ; |247| 

   [!A0]   BNOP    .S1     $C$L25,5          ; |249| 
|| [ A0]   LDW     .D2T2   *+B10(40),B0      ; |254| 

           ; BRANCHCC OCCURS {$C$L25}        ; |249| 
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
$C$L24:    
;**	-----------------------g3:
;** 254	-----------------------    if ( !(*comp).component_id ) goto g5;
;** 258	-----------------------    comp += 52;
;** 249	-----------------------    if ( (++i) < 32u ) goto g3;
;** --------------------------------------------------------------------------*

   [ B0]   ADD     .L1     1,A11,A11         ; |249| 
||         MVK     .S1     32,A3             ; |249| 
|| [!B0]   ZERO    .D1     A0                ; |249| 
|| [ B0]   ADDK    .S2     52,B10            ; |258| 

   [ B0]   CMPLTU  .L1     A11,A3,A0         ; |249| 

   [ A0]   BNOP    .S1     $C$L24,5          ; |249| 
|| [ A0]   LDW     .D2T2   *+B10(40),B0      ; |254| 

           ; BRANCHCC OCCURS {$C$L24}        ; |249| 
;** --------------------------------------------------------------------------*
$C$L25:    
;**	-----------------------g5:
;** 261	-----------------------    if ( i == 32u ) goto g11;

           MVKL    .S2     _overlay_sections,B4
||         MVK     .S1     32,A4             ; |261| 
||         ADD     .D1     A11,16,A3         ; |268| 
||         MVK     .L1     0x5,A12           ; |305| 
||         MVK     .L2     1,B5              ; |270| 
||         MVK     .D2     0x1,B0            ; |264| 

           MVKH    .S2     _overlay_sections,B4
||         CMPEQ   .L1     A11,A4,A0         ; |261| 
||         SHL     .S1     A13,3,A5          ; |263| 

   [ A0]   B       .S1     $C$L28            ; |261| 
||         ADDAW   .D1     A5,A13,A5         ; |263| 

   [!A0]   CALL    .S1     __strasgi_64plus  ; |266| 
||         ADD     .L1X    B4,A5,A5          ; |263| 

   [!A0]   LDW     .D1T2   *A5,B4            ; |263| 
           MV      .L1X    B10,A4            ; |266| 
           EXTU    .S1     A3,16,16,A3       ; |268| 
           MVK     .S1     0x34,A6           ; |266| 
           ; BRANCHCC OCCURS {$C$L28}        ; |261| 
;** --------------------------------------------------------------------------*
;** 263	-----------------------    srcComp = (struct $fake1 *)(overlay_sections[_sectionIdx]).phys_addr;
;** 264	-----------------------    bInit = 1;
;** 266	-----------------------    *comp = *srcComp;
;** 268	-----------------------    (*comp).component_id = (unsigned short)(i+16u);
;** 269	-----------------------    (*comp).overlay_section_idx = _sectionIdx;
;** 270	-----------------------    (*comp).ref_count = 1;
;** 274	-----------------------    if ( NULL == (*comp).fxns.init ) goto g8;
           ADDKPC  .S2     $C$RL2,B3,0       ; |266| 
$C$RL2:    ; CALL OCCURS {__strasgi_64plus} {0}  ; |266| 
;** --------------------------------------------------------------------------*
           LDW     .D2T2   *B10,B4           ; |274| 
           STW     .D2T1   A3,*+B10(40)      ; |268| 
           STW     .D2T1   A13,*+B10(44)     ; |269| 
           STW     .D2T2   B5,*+B10(48)      ; |270| 
           NOP             1
           CMPEQ   .L2     0,B4,B1           ; |274| 

   [ B1]   BNOP    .S1     $C$L26,4          ; |274| 
|| [!B1]   LDW     .D2T2   *B10,B4           ; |277| 

   [!B1]   CALL    .S2     B4                ; |277| 
           ; BRANCHCC OCCURS {$C$L26}        ; |274| 
;** --------------------------------------------------------------------------*
;** 277	-----------------------    bInit = (*(*comp).fxns.init)();
           ADDKPC  .S2     $C$RL3,B3,4       ; |277| 
$C$RL3:    ; CALL OCCURS {B4} {0}            ; |277| 
;** --------------------------------------------------------------------------*
           MV      .L2X    A4,B0             ; |277| 
;** --------------------------------------------------------------------------*
$C$L26:    
;**	-----------------------g8:
;** 280	-----------------------    if ( bInit ) goto g10;

   [ B0]   BNOP    .S1     $C$L27,1          ; |280| 
||         MV      .L1     A13,A4            ; |296| 
||         ZERO    .L2     B4                ; |292| 
|| [ B0]   LDW     .D2T2   *+B10(40),B4      ; |282| 
||         ZERO    .S2     B5                ; |292| 

   [!B0]   CALL    .S1     _loc_mlb_overlay_unregister ; |296| 
           MVK     .L1     0x6,A12           ; |299| 
   [ B0]   MV      .L1X    B5,A12            ; |282| 
   [ B0]   STW     .D2T2   B4,*B11           ; |282| 
           ; BRANCHCC OCCURS {$C$L27}        ; |280| 
;** --------------------------------------------------------------------------*
;** 292	-----------------------    (*comp).component_id = 0u;
;** 293	-----------------------    (*comp).fxns.exec = NULL;
;** 296	-----------------------    loc_mlb_overlay_unregister(_sectionIdx);
;** 299	-----------------------    ret = 6u;
;** 299	-----------------------    goto g13;
           STW     .D2T2   B4,*+B10(40)      ; |292| 

           STW     .D2T2   B5,*+B10(4)       ; |293| 
||         ADDKPC  .S2     $C$RL4,B3,0       ; |296| 

$C$RL4:    ; CALL OCCURS {_loc_mlb_overlay_unregister} {0}  ; |296| 
;** --------------------------------------------------------------------------*

           B       .S1     $C$L29            ; |299| 
||         LDDW    .D2T1   *++SP,A11:A10     ; |318| 
||         MV      .L1     A12,A4            ; |317| 
||         MV      .L2     B13,B3            ; |318| 

           LDDW    .D2T1   *++SP,A13:A12     ; |318| 

           RET     .S2     B3                ; |318| 
||         LDDW    .D2T2   *++SP,B11:B10     ; |318| 

           LDW     .D2T2   *++SP(8),B13      ; |318| 
           NOP             2
           ; BRANCH OCCURS {$C$L29}          ; |299| 
;** --------------------------------------------------------------------------*
$C$L27:    
;**	-----------------------g10:
;** 282	-----------------------    *_retMainComponentId = (*comp).component_id;
;** 285	-----------------------    ret = 0u;
;** 288	-----------------------    goto g13;
;**	-----------------------g11:
;** 305	-----------------------    ret = 5u;
;** 305	-----------------------    goto g13;
;**	-----------------------g12:
;** 312	-----------------------    ret = 4u;
;** --------------------------------------------------------------------------*
$C$L28:    
           LDDW    .D2T1   *++SP,A11:A10     ; |318| 

           MV      .L1     A12,A4            ; |317| 
||         LDDW    .D2T1   *++SP,A13:A12     ; |318| 
||         MV      .L2     B13,B3            ; |318| 

           LDDW    .D2T2   *++SP,B11:B10     ; |318| 
||         RET     .S2     B3                ; |318| 

           LDW     .D2T2   *++SP(8),B13      ; |318| 
           NOP             2
;** --------------------------------------------------------------------------*
$C$L29:    
;**	-----------------------g13:
;** 317	-----------------------    return ret;
           NOP             2
           ; BRANCH OCCURS {B3}              ; |318| 
	.sect	".text"
	.clink
	.global	_mlb_syscall_component_register

;******************************************************************************
;* FUNCTION NAME: mlb_syscall_component_register                              *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,B10,B11,SP,A16,A17,A18,A19,A20,A21,A22, *
;*                           A23,A24,A25,A26,A27,A28,A29,A30,A31,B16,B17,B18, *
;*                           B19,B20,B21,B22,B23,B24,B25,B26,B27,B28,B29,B30, *
;*                           B31                                              *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,B10,B11,DP,SP,A16,A17,A18,A19,A20,A21,  *
;*                           A22,A23,A24,A25,A26,A27,A28,A29,A30,A31,B16,B17, *
;*                           B18,B19,B20,B21,B22,B23,B24,B25,B26,B27,B28,B29, *
;*                           B30,B31                                          *
;*   Local Frame Size  : 0 Args + 0 Auto + 8 Save = 8 byte                    *
;******************************************************************************
_mlb_syscall_component_register:
;** --------------------------------------------------------------------------*
;** 325	-----------------------    if ( (unsigned)_sectionIdx >= 5u ) goto g16;

           CMPEQ   .L1     0,A4,A0           ; |327| 
||         CMPLTU  .L2     B4,5,B0           ; |325| 
||         MVK     .S1     0x4,A3            ; |396| 
||         STW     .D2T2   B11,*SP--(8)      ; |322| 
||         MV      .S2     B3,B11            ; |322| 

   [!B0]   ZERO    .L1     A0                ; |390| nullify predicate
|| [!B0]   B       .S1     $C$L33            ; |325| 
|| [ B0]   MVK     .D1     0x8,A3            ; |390| 
||         STW     .D2T2   B10,*+SP(4)       ; |322| 
||         MV      .L2     B4,B5             ; |322| 

   [ A0]   BNOP    .S1     $C$L33,4          ; |327| 
           ; BRANCHCC OCCURS {$C$L33}        ; |325| 
;** --------------------------------------------------------------------------*
;** 327	-----------------------    if ( NULL == _component ) goto g15;
   [!A0]   LDW     .D1T1   *+A4(4),A3        ; |329| 
           ; BRANCHCC OCCURS {$C$L33}        ; |327| 
;** --------------------------------------------------------------------------*
;** 329	-----------------------    if ( NULL == (*_component).fxns.exec ) goto g14;

           ZERO    .L1     A5                ; |334| 
||         MVKL    .S2     _components+832,B10

           MVK     .S1     32,A31            ; |334| 
           MVKH    .S2     _components+832,B10
           CMPLTU  .L1     A5,A31,A0         ; |334| 

           CMPEQ   .L1     0,A3,A1           ; |329| 
||         MVK     .S1     0x7,A3            ; |384| 

   [ A1]   MVK     .L1     0x1,A0            ; nullify predicate
|| [ A1]   B       .S1     $C$L33            ; |329| 

   [!A0]   BNOP    .S1     $C$L31,4          ; |334| 
           ; BRANCHCC OCCURS {$C$L33}        ; |329| 
;** --------------------------------------------------------------------------*
;** 331	-----------------------    comp = &components[16];
;** 334	-----------------------    if ( (i = 0u) >= 32u ) goto g7;
   [ A0]   LDW     .D2T2   *+B10(40),B0      ; |339| 
           ; BRANCHCC OCCURS {$C$L31}        ; |334| 
;** --------------------------------------------------------------------------*
           NOP             4
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
$C$L30:    
;**	-----------------------g5:
;** 339	-----------------------    if ( !(*comp).component_id ) goto g7;
;** 343	-----------------------    comp += 52;
;** 334	-----------------------    if ( (++i) < 32u ) goto g5;
;** --------------------------------------------------------------------------*

           MVK     .S1     32,A3             ; |334| 
|| [ B0]   ADD     .L1     1,A5,A5           ; |334| 
|| [!B0]   ZERO    .D1     A0                ; |334| 
|| [ B0]   ADDK    .S2     52,B10            ; |343| 

   [ B0]   CMPLTU  .L1     A5,A3,A0          ; |334| 

   [ A0]   BNOP    .S1     $C$L30,5          ; |334| 
|| [ A0]   LDW     .D2T2   *+B10(40),B0      ; |339| 

           ; BRANCHCC OCCURS {$C$L30}        ; |334| 
;** --------------------------------------------------------------------------*
$C$L31:    
;**	-----------------------g7:
;** 346	-----------------------    if ( i == 32u ) goto g13;

           MV      .L2X    A4,B4             ; |350| 
||         MV      .L1X    B10,A4            ; |350| 
||         MVK     .S2     1,B6              ; |354| 
||         MVK     .D2     0x1,B0            ; |348| 
||         MVK     .S1     32,A6             ; |346| 

           CMPEQ   .L1     A5,A6,A0          ; |346| 
   [ A0]   B       .S1     $C$L33            ; |346| 
   [!A0]   CALL    .S1     __strasgi_64plus  ; |350| 
           ADD     .D1     A5,16,A3          ; |352| 
           MVK     .S1     0x34,A6           ; |350| 
           EXTU    .S1     A3,16,16,A7       ; |352| 
           MVK     .L1     0x5,A3            ; |378| 
           ; BRANCHCC OCCURS {$C$L33}        ; |346| 
;** --------------------------------------------------------------------------*
;** 348	-----------------------    bInit = 1;
;** 350	-----------------------    T$1 = (void *)comp;
;** 350	-----------------------    *T$1 = *(const void *)_component;
;** 352	-----------------------    (*comp).component_id = (unsigned short)(i+16u);
;** 353	-----------------------    (*comp).overlay_section_idx = _sectionIdx;
;** 354	-----------------------    (*comp).ref_count = 1;
;** 356	-----------------------    if ( NULL == (*comp).fxns.init ) goto g10;
           ADDKPC  .S2     $C$RL5,B3,0       ; |350| 
$C$RL5:    ; CALL OCCURS {__strasgi_64plus} {0}  ; |350| 
;** --------------------------------------------------------------------------*
           LDW     .D2T2   *B10,B4           ; |356| 
           STW     .D2T2   B6,*+B10(48)      ; |354| 
           STW     .D2T2   B5,*+B10(44)      ; |353| 
           STW     .D2T1   A7,*+B10(40)      ; |352| 
           NOP             1
           CMPEQ   .L2     0,B4,B1           ; |356| 

   [ B1]   BNOP    .S1     $C$L32,4          ; |356| 
|| [!B1]   LDW     .D2T2   *B10,B4           ; |359| 
|| [ B1]   ZERO    .L2     B4                ; |369| 
|| [ B1]   MVK     .L1     0x6,A3            ; |372| 

   [!B1]   CALL    .S2     B4                ; |359| 
           ; BRANCHCC OCCURS {$C$L32}        ; |356| 
;** --------------------------------------------------------------------------*
;** 359	-----------------------    bInit = (*(*comp).fxns.init)();
           ADDKPC  .S2     $C$RL6,B3,4       ; |359| 
$C$RL6:    ; CALL OCCURS {B4} {0}            ; |359| 
;** --------------------------------------------------------------------------*

           MV      .L2X    A4,B0             ; |359| 
||         MVK     .L1     0x6,A3            ; |372| 
||         ZERO    .S2     B4                ; |369| 

;** --------------------------------------------------------------------------*
$C$L32:    
;**	-----------------------g10:
;** 362	-----------------------    if ( bInit ) goto g12;
;** 369	-----------------------    (*comp).component_id = 0u;
;** 372	-----------------------    ret = 6u;
;** 372	-----------------------    goto g17;
;**	-----------------------g12:
;** 365	-----------------------    ret = 0u;
;** 366	-----------------------    goto g17;
;**	-----------------------g13:
;** 378	-----------------------    ret = 5u;
;** 378	-----------------------    goto g17;
;**	-----------------------g14:
;** 384	-----------------------    ret = 7u;
;** 384	-----------------------    goto g17;
;**	-----------------------g15:
;** 390	-----------------------    ret = 8u;
;** 390	-----------------------    goto g17;
;**	-----------------------g16:
;** 396	-----------------------    ret = 4u;

   [ B0]   ZERO    .L1     A3                ; |369| 
|| [!B0]   STW     .D2T2   B4,*+B10(40)      ; |369| 

;** --------------------------------------------------------------------------*
$C$L33:    
;**	-----------------------g17:
;** 399	-----------------------    return (int)ret;
           MV      .L2     B11,B3            ; |400| 

           RET     .S2     B3                ; |400| 
||         LDW     .D2T2   *+SP(4),B10       ; |400| 

           LDW     .D2T2   *++SP(8),B11      ; |400| 
           MV      .L1     A3,A4             ; |399| 
           NOP             3
           ; BRANCH OCCURS {B3}              ; |400| 
	.sect	".text"
	.clink
	.global	_mlb_version

;******************************************************************************
;* FUNCTION NAME: mlb_version                                                 *
;*                                                                            *
;*   Regs Modified     : A4                                                   *
;*   Regs Used         : A4,B3                                                *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_mlb_version:
;** --------------------------------------------------------------------------*
;** 405	-----------------------    return 2u;
           RETNOP  .S2     B3,4              ; |406| 
           MVK     .L1     0x2,A4            ; |405| 
           ; BRANCH OCCURS {B3}              ; |406| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_mlb_exec                                                *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B0,B1,B2,B3,B4,*
;*                           B5,B6,B7,B8,B9,B10,SP,A16,A17,A18,A19,A20,A21,   *
;*                           A22,A23,A24,A25,A26,A27,A28,A29,A30,A31,B16,B17, *
;*                           B18,B19,B20,B21,B22,B23,B24,B25,B26,B27,B28,B29, *
;*                           B30,B31                                          *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B0,B1,B2,B3,B4,*
;*                           B5,B6,B7,B8,B9,B10,DP,SP,A16,A17,A18,A19,A20,A21,*
;*                           A22,A23,A24,A25,A26,A27,A28,A29,A30,A31,B16,B17, *
;*                           B18,B19,B20,B21,B22,B23,B24,B25,B26,B27,B28,B29, *
;*                           B30,B31                                          *
;*   Local Frame Size  : 0 Args + 0 Auto + 16 Save = 16 byte                  *
;******************************************************************************
_loc_mlb_exec:
;** --------------------------------------------------------------------------*
;** 416	-----------------------    switch ( _cmd ) {case 1: goto g8;, case 2: goto g2;, case 3: goto g7;, DEFAULT goto g6};

           CMPEQ   .L2X    A4,1,B0           ; |416| 
||         CMPEQ   .L1     A4,2,A1           ; |416| 
||         STW     .D2T2   B10,*SP--(8)      ; |413| 
||         MV      .S1X    B4,A3             ; |413| 
||         MV      .S2     B6,B10            ; |413| 

   [!B0]   CMPEQ   .L1     A4,3,A0           ; |416| 
|| [!B0]   MV      .S1     A3,A4             ; |434| 
||         STDW    .D2T1   A11:A10,*SP--     ; |413| 
|| [ B0]   B       .S2     $C$L37            ; |416| 
|| [ B0]   ZERO    .D1     A1                ; |434| nullify predicate

   [ A1]   B       .S1     $C$L34            ; |416| 
   [ B0]   CALL    .S1     _mlb_fastcall_initiate ; |424| 
   [!B0]   MV      .L2X    A6,B4             ; |434| 
           MV      .L1X    B3,A11            ; |413| 
           ZERO    .L1     A10               ; |429| 
           ; BRANCHCC OCCURS {$C$L37}        ; |416| 
;** --------------------------------------------------------------------------*
   [ A1]   CALL    .S1     _loc_component_find_by_name ; |434| 
           ; BRANCHCC OCCURS {$C$L34}        ; |416| 
;** --------------------------------------------------------------------------*
   [ A0]   B       .S1     $C$L36            ; |416| 
   [!A0]   B       .S1     $C$L35            ; |416| 
   [ A0]   CALL    .S1     _loc_mlb_overlay_unregister ; |455| 
           NOP             3
           ; BRANCHCC OCCURS {$C$L36}        ; |416| 
;** --------------------------------------------------------------------------*

           B       .S1     $C$L38            ; |421| 
||         MVK     .L1     0x1,A10           ; |420| 

           ; BRANCH OCCURS {$C$L35}          ; |416| 
;** --------------------------------------------------------------------------*
$C$L34:    
;**	-----------------------g2:
;** 434	-----------------------    comp = loc_component_find_by_name((const char *)_arg1, (int)_arg2);
;** 436	-----------------------    if ( NULL != comp ) goto g4;
;** 445	-----------------------    *_ret1 = 3u;
;** 446	-----------------------    *_ret2 = 0u;
;** 446	-----------------------    goto g5;
;**	-----------------------g4:
;** 439	-----------------------    *_ret1 = 0u;
;** 440	-----------------------    *_ret2 = (*comp).component_id|(*comp).overlay_section_idx<<16;
;**	-----------------------g5:
;** 450	-----------------------    ret = 0u;
;** 451	-----------------------    goto g9;
           ADDKPC  .S2     $C$RL7,B3,4       ; |434| 
$C$RL7:    ; CALL OCCURS {_loc_component_find_by_name} {0}  ; |434| 
;** --------------------------------------------------------------------------*

           MV      .L2X    A10,B4            ; |436| 
||         CMPEQ   .L1     0,A4,A0           ; |436| 
||         MVK     .S2     3,B31             ; |445| 
||         MV      .S1     A10,A31           ; |440| 

   [!A0]   STW     .D2T2   B4,*B10           ; |439| 
||         MV      .L2X    A11,B3            ; |463| 

   [!A0]   LDW     .D1T1   *+A4(44),A5       ; |440| 
|| [ A0]   STW     .D2T2   B31,*B10          ; |445| 

   [!A0]   LDW     .D1T1   *+A4(40),A3       ; |440| 

           BNOP    .S1     $C$L38,2          ; |451| 
|| [ A0]   STW     .D1T1   A31,*A8           ; |446| 

   [!A0]   SHL     .S1     A5,16,A4          ; |440| 

   [!A0]   OR      .L1     A4,A3,A3          ; |440| 
||         MV      .S1     A10,A4            ; |462| 

   [!A0]   STW     .D1T1   A3,*A8            ; |440| 
           ; BRANCH OCCURS {$C$L38}          ; |451| 
;** --------------------------------------------------------------------------*
$C$L35:    
;**	-----------------------g6:
;** 420	-----------------------    ret = 1u;
;** 421	-----------------------    goto g9;
           MV      .L1     A10,A4            ; |462| 
           MV      .L2X    A11,B3            ; |463| 
           NOP             3
           ; BRANCH OCCURS {$C$L38}          ; |421| 
;** --------------------------------------------------------------------------*
$C$L36:    
;**	-----------------------g7:
;** 455	-----------------------    *_ret1 = loc_mlb_overlay_unregister(_arg1);
;** 458	-----------------------    ret = 0u;
;** 459	-----------------------    goto g9;
           ADDKPC  .S2     $C$RL8,B3,1       ; |455| 
$C$RL8:    ; CALL OCCURS {_loc_mlb_overlay_unregister} {0}  ; |455| 
;** --------------------------------------------------------------------------*

           B       .S1     $C$L39            ; |459| 
||         STW     .D2T1   A4,*B10           ; |455| 
||         MV      .L2X    A11,B3            ; |463| 
||         MV      .L1     A10,A4            ; |462| 

           RET     .S2     B3                ; |463| 
||         LDDW    .D2T1   *++SP,A11:A10     ; |463| 

           LDW     .D2T2   *++SP(8),B10      ; |463| 
           NOP             3
           ; BRANCH OCCURS {$C$L39}          ; |459| 
;** --------------------------------------------------------------------------*
$C$L37:    
;**	-----------------------g8:
;** 424	-----------------------    mlb_fastcall_initiate();
;** 426	-----------------------    BCACHE_wbInvAll();
;** 429	-----------------------    ret = 0u;
           ADDKPC  .S2     $C$RL9,B3,1       ; |424| 
$C$RL9:    ; CALL OCCURS {_mlb_fastcall_initiate} {0}  ; |424| 
;** --------------------------------------------------------------------------*
           CALLP   .S2     _BCACHE_wbInvAll,B3
$C$RL10:   ; CALL OCCURS {_BCACHE_wbInvAll} {0}  ; |426| 

           MV      .L1     A10,A4            ; |462| 
||         MV      .L2X    A11,B3            ; |463| 

;** --------------------------------------------------------------------------*
$C$L38:    

           LDDW    .D2T1   *++SP,A11:A10     ; |463| 
||         RET     .S2     B3                ; |463| 

           LDW     .D2T2   *++SP(8),B10      ; |463| 
           NOP             3
;** --------------------------------------------------------------------------*
$C$L39:    
;**	-----------------------g9:
;** 462	-----------------------    return ret;
           NOP             1
           ; BRANCH OCCURS {B3}              ; |463| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_mlb_exec_fc                                             *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B0,B1,B2,B3,B4,*
;*                           B5,B6,B7,B8,B9,B10,B11,SP,A16,A17,A18,A19,A20,   *
;*                           A21,A22,A23,A24,A25,A26,A27,A28,A29,A30,A31,B16, *
;*                           B17,B18,B19,B20,B21,B22,B23,B24,B25,B26,B27,B28, *
;*                           B29,B30,B31                                      *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B0,B1,B2,B3,B4,*
;*                           B5,B6,B7,B8,B9,B10,B11,DP,SP,A16,A17,A18,A19,A20,*
;*                           A21,A22,A23,A24,A25,A26,A27,A28,A29,A30,A31,B16, *
;*                           B17,B18,B19,B20,B21,B22,B23,B24,B25,B26,B27,B28, *
;*                           B29,B30,B31                                      *
;*   Local Frame Size  : 0 Args + 0 Auto + 24 Save = 24 byte                  *
;******************************************************************************
_loc_mlb_exec_fc:
;** --------------------------------------------------------------------------*
;** 471	-----------------------    ret = 0u;
;** 473	-----------------------    switch ( _cmd ) {case 1: goto g5;, case 2: goto g4;, case 3: goto g3;, DEFAULT goto g2};

           CMPEQ   .L1     A4,1,A0           ; |473| 
||         CMPEQ   .L2X    A4,2,B0           ; |473| 
||         STW     .D2T1   A11,*SP--(8)      ; |470| 
||         MV      .S1     A4,A3             ; |470| 
||         MV      .D1X    B4,A4             ; |470| 

           MV      .D1     A0,A1             ; guard predicate rewrite
|| [ A0]   B       .S1     $C$L41            ; |473| 
||         STDW    .D2T2   B11:B10,*SP--     ; |470| 
|| [!A0]   CMPEQ   .L1     A3,3,A0           ; |473| 
||         MV      .L2     B6,B10            ; |470| 
||         ZERO    .S2     B11               ; |486| 

   [ A1]   ZERO    .L2     B0                ; |494| nullify predicate
||         STW     .D2T1   A10,*SP--(8)      ; |470| 
||         ZERO    .L1     A10               ; |486| 
||         MV      .S1X    B3,A11            ; |470| 
|| [!A1]   MV      .S2X    A8,B4             ; |494| 

   [ B0]   BNOP    .S1     $C$L40,3          ; |473| 
           ; BRANCHCC OCCURS {$C$L41}        ; |473| 
;** --------------------------------------------------------------------------*
   [ B0]   CALL    .S1     _loc_mlb_overlay_register ; |494| 
           NOP             1
           ; BRANCHCC OCCURS {$C$L40}        ; |473| 
;** --------------------------------------------------------------------------*
;**	-----------------------g2:
;** 477	-----------------------    ret = 2u;
;** 478	-----------------------    goto g6;
   [!A0]   B       .S1     $C$L42            ; |478| 
   [ A0]   CALL    .S1     _loc_mlb_overlay_unregister ; |501| 
   [!A0]   MV      .L2X    A11,B3            ; |506| 
   [!A0]   MVK     .L1     0x2,A10           ; |477| 
   [!A0]   MV      .L1     A10,A4            ; |505| 
   [!A0]   LDW     .D2T1   *++SP(8),A10      ; |506| 
           ; BRANCHCC OCCURS {$C$L42}        ; |478| 
;** --------------------------------------------------------------------------*
;**	-----------------------g3:
;** 501	-----------------------    *_ret1 = loc_mlb_overlay_unregister(_arg1);
;** 502	-----------------------    goto g6;
           ADDKPC  .S2     $C$RL11,B3,0      ; |501| 
$C$RL11:   ; CALL OCCURS {_loc_mlb_overlay_unregister} {0}  ; |501| 
;** --------------------------------------------------------------------------*

           BNOP    .S1     $C$L42,4          ; |502| 
||         STW     .D2T1   A4,*B10           ; |501| 
||         MV      .L1     A10,A4            ; |505| 
||         MV      .L2X    A11,B3            ; |506| 

           LDW     .D2T1   *++SP(8),A10      ; |506| 
           ; BRANCH OCCURS {$C$L42}          ; |502| 
;** --------------------------------------------------------------------------*
$C$L40:    
;**	-----------------------g4:
;** 494	-----------------------    *_ret1 = loc_mlb_overlay_register(_arg1, _ret2);
;** 495	-----------------------    goto g6;
           ADDKPC  .S2     $C$RL12,B3,3      ; |494| 
$C$RL12:   ; CALL OCCURS {_loc_mlb_overlay_register} {0}  ; |494| 
;** --------------------------------------------------------------------------*

           B       .S1     $C$L43            ; |495| 
||         STW     .D2T1   A4,*B10           ; |494| 
||         MV      .L1     A10,A4            ; |505| 
||         MV      .L2X    A11,B3            ; |506| 

           LDW     .D2T1   *++SP(8),A10      ; |506| 

           RET     .S2     B3                ; |506| 
||         LDDW    .D2T2   *++SP,B11:B10     ; |506| 

           LDW     .D2T1   *++SP(8),A11      ; |506| 
           NOP             2
           ; BRANCH OCCURS {$C$L43}          ; |495| 
;** --------------------------------------------------------------------------*
$C$L41:    
;**	-----------------------g5:
;** 483	-----------------------    BCACHE_wbInvAll();
;** 486	-----------------------    *_ret1 = 0u;
           CALLP   .S2     _BCACHE_wbInvAll,B3
$C$RL13:   ; CALL OCCURS {_BCACHE_wbInvAll} {0}  ; |483| 
;** --------------------------------------------------------------------------*
           STW     .D2T2   B11,*B10          ; |486| 

           LDW     .D2T1   *++SP(8),A10      ; |506| 
||         MV      .L2X    A11,B3            ; |506| 
||         MV      .L1     A10,A4            ; |505| 

;** --------------------------------------------------------------------------*
$C$L42:    

           LDDW    .D2T2   *++SP,B11:B10     ; |506| 
||         RET     .S2     B3                ; |506| 

           LDW     .D2T1   *++SP(8),A11      ; |506| 
           NOP             2
;** --------------------------------------------------------------------------*
$C$L43:    
;**	-----------------------g6:
;** 505	-----------------------    return ret;
           NOP             2
           ; BRANCH OCCURS {B3}              ; |506| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_debug                                                   *
;*                                                                            *
;*   Regs Modified     : A3                                                   *
;*   Regs Used         : A3,A4,B3                                             *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_loc_debug:
;** --------------------------------------------------------------------------*
;** 530	-----------------------    ((volatile unsigned *)mlb_sram)[7] = _val;
;**  	-----------------------    return;
           RETNOP  .S2     B3,2              ; |531| 
           MVKL    .S1     _mlb_sram+28,A3
           MVKH    .S1     _mlb_sram+28,A3
           STW     .D1T1   A4,*A3            ; |530| 
           ; BRANCH OCCURS {B3}              ; |531| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_bzero                                                   *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,A16,A17,A18,A19,A20,A21,A22,A23,A24,A25,*
;*                           A26,A27,A28,A29,A30,A31,B16,B17,B18,B19,B20,B21, *
;*                           B22,B23,B24,B25,B26,B27,B28,B29,B30,B31          *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,DP,SP,A16,A17,A18,A19,A20,A21,A22,A23,  *
;*                           A24,A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19, *
;*                           B20,B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31  *
;*   Local Frame Size  : 0 Args + 0 Auto + 4 Save = 4 byte                    *
;******************************************************************************
_loc_bzero:
;** --------------------------------------------------------------------------*
;** 537	-----------------------    memset(_addr, 0, _numBytes);
;**  	-----------------------    return;
           CALLRET .S1     _memset           ; |537| 
           MV      .L1X    B4,A6             ; |535| 
           ZERO    .L2     B4                ; |537| 
           NOP             3
$C$RL14:   ; CALL-RETURN OCCURS {_memset} 0  ; |537| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_logbuf_addline                                          *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B0,B1,B2,B3,B4,*
;*                           B5,B6,B7,B8,B9,B10,B11,B13,SP,A16,A17,A18,A19,   *
;*                           A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,A30,A31, *
;*                           B16,B17,B18,B19,B20,B21,B22,B23,B24,B25,B26,B27, *
;*                           B28,B29,B30,B31                                  *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B0,B1,B2,B3,B4,*
;*                           B5,B6,B7,B8,B9,B10,B11,B13,DP,SP,A16,A17,A18,A19,*
;*                           A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,A30,A31, *
;*                           B16,B17,B18,B19,B20,B21,B22,B23,B24,B25,B26,B27, *
;*                           B28,B29,B30,B31                                  *
;*   Local Frame Size  : 0 Args + 0 Auto + 24 Save = 24 byte                  *
;******************************************************************************
_loc_logbuf_addline:
;** --------------------------------------------------------------------------*
;** 545	-----------------------    if ( _numCharsIncASCIIZ >= 16384u ) goto g8;

           STW     .D2T2   B13,*SP--(8)      ; |542| 
||         MVK     .S1     16384,A3          ; |545| 
||         MV      .L2     B3,B13            ; |542| 

           STDW    .D2T2   B11:B10,*SP--     ; |542| 
||         CMPLTU  .L1X    B4,A3,A0          ; |545| 

           STDW    .D2T1   A11:A10,*SP--     ; |542| 
|| [!A0]   B       .S1     $C$L46            ; |545| 

           LDW     .D2T2   *+DP(_mlb_logbuf_offset_writep),B5 ; |547| 
           MV      .L2     B4,B10            ; |542| 
           MV      .L1     A4,A10            ; |542| 
           MVK     .L1     0xffffffff,A11    ; |586| 
           MV      .L2X    A3,B8             ; |586| 
           ; BRANCHCC OCCURS {$C$L46}        ; |545| 
;** --------------------------------------------------------------------------*
;** 547	-----------------------    if ( *mlb_logbuf_offset_writep+_numCharsIncASCIIZ > 16384u ) goto g4;

           MV      .L1     A3,A11            ; |547| 
||         MV      .S1X    B10,A6            ; |564| 
||         LDW     .D2T2   *B5,B4            ; |547| 

           MV      .L2     B8,B16            ; |547| 
           MV      .L2     B8,B11            ; |547| 
           MV      .L2     B5,B6             ; |550| 
           LDW     .D2T2   *+DP(_mlb_logbuf),B7 ; |550| 
           ADD     .L2     B10,B4,B4         ; |547| 

           CMPGTU  .L2     B4,B8,B0          ; |547| 
||         MV      .S2     B5,B8             ; |550| 
||         MV      .D2X    A10,B4            ; |564| 

   [ B0]   B       .S1     $C$L44            ; |547| 
|| [ B0]   LDW     .D2T2   *B6,B4            ; |550| 

   [!B0]   LDW     .D2T2   *B8,B5            ; |564| 
   [ B0]   LDW     .D2T2   *B5,B5            ; |550| 
   [!B0]   CALL    .S1     _memcpy           ; |564| 
   [ B0]   CALL    .S1     _memcpy           ; |550| 
           MV      .L2     B7,B9             ; |550| 
           ; BRANCHCC OCCURS {$C$L44}        ; |547| 
;** --------------------------------------------------------------------------*
;** 564	-----------------------    memcpy(*mlb_logbuf_offset_writep+mlb_logbuf, (const void *)_str, _numCharsIncASCIIZ);
;** 564	-----------------------    goto g5;
           ADD     .L2     B9,B5,B5          ; |564| 
           ADDKPC  .S2     $C$RL15,B3,0      ; |564| 
           MV      .L1X    B5,A4             ; |564| 
$C$RL15:   ; CALL OCCURS {_memcpy} {0}       ; |564| 
;** --------------------------------------------------------------------------*

           BNOP    .S1     $C$L45,4          ; |564| 
||         LDW     .D2T1   *+DP(_mlb_logbuf_offset_writep),A3 ; |570| 
||         ZERO    .L1     A5                ; |578| 

           LDW     .D1T1   *A3,A4            ; |570| 
           ; BRANCH OCCURS {$C$L45}          ; |564| 
;** --------------------------------------------------------------------------*
$C$L44:    
;**	-----------------------g4:
;** 550	-----------------------    memcpy(*mlb_logbuf_offset_writep+mlb_logbuf, (const void *)_str, 16384u-*mlb_logbuf_offset_writep);
;** 556	-----------------------    memcpy((void *)mlb_logbuf, _str-*mlb_logbuf_offset_writep+16384u, *mlb_logbuf_offset_writep+_numCharsIncASCIIZ-16384u);
           ADD     .L2     B7,B4,B6          ; |550| 
           SUB     .L2     B16,B5,B5         ; |550| 
           MV      .L1X    B6,A4             ; |550| 

           MV      .L1X    B5,A6             ; |550| 
||         MV      .L2X    A10,B4            ; |550| 
||         ADDKPC  .S2     $C$RL16,B3,0      ; |550| 

$C$RL16:   ; CALL OCCURS {_memcpy} {0}       ; |550| 
;** --------------------------------------------------------------------------*
           LDW     .D2T1   *+DP(_mlb_logbuf_offset_writep),A3 ; |556| 
           LDW     .D2T1   *+DP(_mlb_logbuf),A4 ; |556| 
           NOP             3
           MV      .L2X    A3,B4             ; |556| 

           LDW     .D1T1   *A3,A3            ; |556| 
||         LDW     .D2T2   *B4,B4            ; |556| 

           NOP             4

           ADD     .L2     B10,B4,B4         ; |556| 
||         SUB     .L1     A10,A3,A3         ; |556| 

           SUB     .L2     B4,B11,B5         ; |556| 
||         ADD     .L1     A11,A3,A3         ; |556| 

           NOP             1

           MV      .L1X    B5,A6             ; |556| 
||         MV      .L2X    A3,B4             ; |556| 
||         CALLP   .S2     _memcpy,B3

$C$RL17:   ; CALL OCCURS {_memcpy} {0}       ; |556| 
           LDW     .D2T1   *+DP(_mlb_logbuf_offset_writep),A3 ; |570| 
           ZERO    .L1     A5                ; |578| 
           NOP             3
           LDW     .D1T1   *A3,A4            ; |570| 
;** --------------------------------------------------------------------------*
$C$L45:    
;**	-----------------------g5:
;** 570	-----------------------    *mlb_logbuf_offset_writep += _numCharsIncASCIIZ;
;** 572	-----------------------    if ( *mlb_logbuf_offset_writep < 16384u ) goto g7;
;** 574	-----------------------    *mlb_logbuf_offset_writep -= 16384u;
;**	-----------------------g7:
;** 578	-----------------------    mlb_logbuf[*mlb_logbuf_offset_writep] = 0;
;** 581	-----------------------    ret = 0;
;** 582	-----------------------    goto g9;
;**	-----------------------g8:
;** 586	-----------------------    ret = (-1);
           NOP             4
           ADD     .L1X    B10,A4,A4         ; |570| 
           STW     .D1T1   A4,*A3            ; |570| 
           LDW     .D2T1   *+DP(_mlb_logbuf_offset_writep),A3 ; |572| 
           LDW     .D2T2   *+DP(_mlb_logbuf_offset_writep),B4 ; |574| 
           NOP             3
           LDW     .D1T1   *A3,A3            ; |572| 
           NOP             4
           CMPLTU  .L1     A3,A11,A0         ; |572| 
   [!A0]   LDW     .D2T2   *B4,B5            ; |574| 
           ZERO    .L1     A11               ; |578| 
           NOP             3
   [!A0]   ADDK    .S2     -16384,B5         ; |574| 
   [!A0]   STW     .D2T2   B5,*B4            ; |574| 
           LDW     .D2T1   *+DP(_mlb_logbuf_offset_writep),A4 ; |578| 
           LDW     .D2T1   *+DP(_mlb_logbuf),A3 ; |578| 
           NOP             3
           LDW     .D1T1   *A4,A4            ; |578| 
           NOP             4
           STB     .D1T1   A5,*+A4[A3]       ; |578| 
;** --------------------------------------------------------------------------*
$C$L46:    
;**	-----------------------g9:
;** 589	-----------------------    BCACHE_wbInv((void *)mlb_logbuf, 16388u, 1u);
;** 592	-----------------------    return ret;
           MVK     .S2     0x4004,B4         ; |589| 

           CALLP   .S2     _BCACHE_wbInv,B3
||         LDW     .D2T1   *+DP(_mlb_logbuf),A4 ; |589| 
||         MVK     .L1     0x1,A6            ; |589| 

$C$RL18:   ; CALL OCCURS {_BCACHE_wbInv} {0}  ; |589| 
;** --------------------------------------------------------------------------*

           MV      .L1     A11,A4            ; |592| 
||         LDDW    .D2T1   *++SP,A11:A10     ; |593| 
||         MV      .L2     B13,B3            ; |593| 

           LDDW    .D2T2   *++SP,B11:B10     ; |593| 
||         RET     .S2     B3                ; |593| 

           LDW     .D2T2   *++SP(8),B13      ; |593| 
           NOP             4
           ; BRANCH OCCURS {B3}              ; |593| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_puts                                                    *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,SP,A16,A17,A18,A19,A20,A21,A22,A23,A24, *
;*                           A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19,B20, *
;*                           B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31      *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,DP,SP,A16,A17,A18,A19,A20,A21,A22,A23,  *
;*                           A24,A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19, *
;*                           B20,B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31  *
;*   Local Frame Size  : 0 Args + 0 Auto + 4 Save = 4 byte                    *
;******************************************************************************
_loc_puts:
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
;** 599	-----------------------    string = _str;
;** 110	-----------------------    n = 0xffffffffu;  // [5]
;** 111	-----------------------    s = string;  // [5]
;**	-----------------------g2:
;** 113	-----------------------    ++n;  // [5]
;** 113	-----------------------    if ( *s++ ) goto g2;  // [5]

           MV      .L2X    A4,B4             ; |597| 
||         STW     .D2T2   B3,*SP--(8)       ; |597| 

           LDB     .D2T2   *B4++,B0          ; |113| 
           MVK     .L1     0xffffffff,A3     ; |110| 
           NOP             3
;** --------------------------------------------------------------------------*
;**   BEGIN LOOP $C$L47
;** --------------------------------------------------------------------------*
$C$L47:    

   [ B0]   BNOP    .S1     $C$L47,5          ; |113| 
|| [ B0]   LDB     .D2T2   *B4++,B0          ; |113| 
||         ADD     .L1     1,A3,A3           ; |113| 

           ; BRANCHCC OCCURS {$C$L47}        ; |113| 
;** --------------------------------------------------------------------------*
;** 114	-----------------------    if ( (len = n) > 0 ) goto g5;  // [5]
;** 608	-----------------------    ret = 0;
;** 608	-----------------------    goto g6;
           CMPGT   .L2X    A3,0,B0           ; |114| 

   [!B0]   LDW     .D2T2   *++SP(8),B3       ; |612| 
|| [!B0]   B       .S1     $C$L48            ; |608| 

   [ B0]   CALL    .S1     _loc_logbuf_addline ; |603| 
           ADD     .L2X    1,A3,B4           ; |603| 
           ZERO    .L1     A3                ; |608| 
   [!B0]   MV      .L1     A3,A4             ; |611| 
   [!B0]   RET     .S2     B3                ; |612| 
           ; BRANCHCC OCCURS {$C$L48}        ; |608| 
;** --------------------------------------------------------------------------*
;**	-----------------------g5:
;** 603	-----------------------    ret = loc_logbuf_addline(_str, (unsigned)len+1u);
           ADDKPC  .S2     $C$RL19,B3,0      ; |603| 
$C$RL19:   ; CALL OCCURS {_loc_logbuf_addline} {0}  ; |603| 
;** --------------------------------------------------------------------------*
           LDW     .D2T2   *++SP(8),B3       ; |612| 
           MV      .L1     A4,A3             ; |603| 
           MV      .L1     A3,A4             ; |611| 
           NOP             2
           RET     .S2     B3                ; |612| 
;** --------------------------------------------------------------------------*
$C$L48:    
;**	-----------------------g6:
;** 611	-----------------------    return ret;
           NOP             5
           ; BRANCH OCCURS {B3}              ; |612| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_printf                                                  *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,B13,SP,FP,A16,A17,A18,A19,A20,A21,A22,  *
;*                           A23,A24,A25,A26,A27,A28,A29,A30,A31,B16,B17,B18, *
;*                           B19,B20,B21,B22,B23,B24,B25,B26,B27,B28,B29,B30, *
;*                           B31                                              *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,B13,DP,SP,FP,A16,A17,A18,A19,A20,A21,   *
;*                           A22,A23,A24,A25,A26,A27,A28,A29,A30,A31,B16,B17, *
;*                           B18,B19,B20,B21,B22,B23,B24,B25,B26,B27,B28,B29, *
;*                           B30,B31                                          *
;*   Local Frame Size  : 0 Args + 516 Auto + 8 Save = 524 byte                *
;******************************************************************************
_loc_printf:
;** --------------------------------------------------------------------------*
;** 624	-----------------------    if ( (ret = vsnprintf(&buf, 512u, _fmt, l = &_fmt+4)) <= 0 ) goto g3;

           MV      .L1X    SP,FP             ; |616| 
||         STW     .D2T1   FP,*SP--(8)       ; |616| 

           ADDK    .S2     -520,SP

           STW     .D2T2   B13,*+SP(524)
||         MVK     .S2     0x200,B4          ; |624| 

           MV      .L2     B3,B13
||         CALLP   .S2     _vsnprintf,B3
||         LDW     .D1T1   *+FP(4),A6        ; |624| 
||         ADD     .L1X    8,SP,A4           ; |624| 
||         ADD     .D2X    8,FP,B6           ; |624| 

$C$RL20:   ; CALL OCCURS {_vsnprintf} {0}    ; |624| 
;** --------------------------------------------------------------------------*

           CMPGT   .L1     A4,0,A0           ; |624| 
||         MV      .S1     A4,A3             ; |624| 

   [!A0]   B       .S1     $C$L49            ; |624| 
   [ A0]   CALL    .S1     _loc_puts         ; |628| 
           ADD     .L1X    8,SP,A4           ; |628| 
   [!A0]   MV      .L2     B13,B3            ; |634| 
   [!A0]   LDW     .D2T2   *+SP(524),B13     ; |634| 
   [!A0]   RET     .S2     B3                ; |634| 
           ; BRANCHCC OCCURS {$C$L49}        ; |624| 
;** --------------------------------------------------------------------------*
;** 628	-----------------------    ret = loc_puts(&buf);
           ADDKPC  .S2     $C$RL21,B3,0      ; |628| 
$C$RL21:   ; CALL OCCURS {_loc_puts} {0}     ; |628| 
;** --------------------------------------------------------------------------*
           MV      .L2     B13,B3            ; |634| 

           RET     .S2     B3                ; |634| 
||         LDW     .D2T2   *+SP(524),B13     ; |634| 
||         MV      .L1     A4,A3             ; |628| 

;** --------------------------------------------------------------------------*
$C$L49:    
;**	-----------------------g3:
;** 633	-----------------------    return ret;

           MV      .L2X    FP,SP             ; |634| 
||         LDW     .D1T1   *FP,FP            ; |634| 

           MV      .L1     A3,A4             ; |633| 
           NOP             3
           ; BRANCH OCCURS {B3}              ; |634| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_vprintf                                                 *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,SP,A16,A17,A18,A19,A20,A21,A22,A23,A24, *
;*                           A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19,B20, *
;*                           B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31      *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,DP,SP,A16,A17,A18,A19,A20,A21,A22,A23,  *
;*                           A24,A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19, *
;*                           B20,B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31  *
;*   Local Frame Size  : 0 Args + 516 Auto + 4 Save = 520 byte                *
;******************************************************************************
_loc_vprintf:
;** --------------------------------------------------------------------------*
;** 642	-----------------------    if ( (ret = vsnprintf(&buf, 512u, _fmt, _l)) <= 0 ) goto g3;
           ADDK    .S2     -520,SP           ; |638| 

           MV      .L2     B4,B6             ; |638| 
||         MVK     .S2     0x200,B4          ; |642| 

           STW     .D2T2   B3,*+SP(520)      ; |638| 
||         CALLP   .S2     _vsnprintf,B3
||         MV      .L1     A4,A6             ; |642| 
||         ADD     .S1X    8,SP,A4           ; |642| 

$C$RL22:   ; CALL OCCURS {_vsnprintf} {0}    ; |642| 
;** --------------------------------------------------------------------------*

           CMPGT   .L1     A4,0,A0           ; |642| 
||         MV      .S1     A4,A3             ; |642| 

   [!A0]   LDW     .D2T2   *+SP(520),B3      ; |650| 
|| [!A0]   B       .S1     $C$L50            ; |642| 

   [ A0]   CALL    .S1     _loc_puts         ; |646| 
           ADD     .L1X    8,SP,A4           ; |646| 
   [!A0]   ADDK    .S2     520,SP            ; |650| 
   [!A0]   MV      .L1     A3,A4             ; |649| 
   [!A0]   RET     .S2     B3                ; |650| 
           ; BRANCHCC OCCURS {$C$L50}        ; |642| 
;** --------------------------------------------------------------------------*
;** 646	-----------------------    ret = loc_puts(&buf);
           ADDKPC  .S2     $C$RL23,B3,0      ; |646| 
$C$RL23:   ; CALL OCCURS {_loc_puts} {0}     ; |646| 
;** --------------------------------------------------------------------------*
           LDW     .D2T2   *+SP(520),B3      ; |650| 
           MV      .L1     A4,A3             ; |646| 
           ADDK    .S2     520,SP            ; |650| 
           MV      .L1     A3,A4             ; |649| 
           NOP             1
           RET     .S2     B3                ; |650| 
;** --------------------------------------------------------------------------*
$C$L50:    
;**	-----------------------g3:
;** 649	-----------------------    return ret;
           NOP             5
           ; BRANCH OCCURS {B3}              ; |650| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_syscalls_init                                           *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,SP,A16,A17,A18,A19,A20,A21,A22,A23,A24, *
;*                           A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19,B20, *
;*                           B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31      *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,DP,SP,A16,A17,A18,A19,A20,A21,A22,A23,  *
;*                           A24,A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19, *
;*                           B20,B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31  *
;*   Local Frame Size  : 0 Args + 0 Auto + 4 Save = 4 byte                    *
;******************************************************************************
_loc_syscalls_init:
;** --------------------------------------------------------------------------*
;** 656	-----------------------    memset(&syscalls, 0, 216u);
;** 659	-----------------------    syscalls.mlb_panic = &mlb_panic;
;** 660	-----------------------    syscalls.mlb_debug_usr = &mlb_debug_usr;
;** 661	-----------------------    syscalls.mlb_fastcall_initiate = &mlb_fastcall_initiate;
;** 662	-----------------------    syscalls.mlb_component_register = &mlb_syscall_component_register;
;** 663	-----------------------    syscalls.mlb_component_find_by_name = &loc_component_find_by_name;
;** 664	-----------------------    syscalls.mlb_version = &mlb_version;
;** 667	-----------------------    syscalls.cache_inv = (void (*)())&BCACHE_inv;
;** 668	-----------------------    syscalls.cache_wb = (void (*)())&BCACHE_wb;
;** 669	-----------------------    syscalls.cache_wbInv = (void (*)())&BCACHE_wbInv;
;** 670	-----------------------    syscalls.cache_invL1pAll = &BCACHE_invL1pAll;
;** 671	-----------------------    syscalls.cache_wbAll = &BCACHE_wbAll;
;** 672	-----------------------    syscalls.cache_wbInvAll = &BCACHE_wbInvAll;
;** 673	-----------------------    syscalls.cache_wait = &BCACHE_wait;
;** 676	-----------------------    syscalls.bzero = &loc_bzero;
;** 677	-----------------------    syscalls.memset = &memset;
;** 678	-----------------------    syscalls.memcpy = &memcpy;
;** 681	-----------------------    syscalls.strncmp = &strncmp;
;** 682	-----------------------    syscalls.strncpy = &strncpy;
;** 683	-----------------------    syscalls.strstr = &strstr;
;** 684	-----------------------    syscalls.strchr = &strchr;
;** 685	-----------------------    syscalls.strrchr = &strrchr;
;** 686	-----------------------    syscalls.snprintf = &snprintf;
;** 687	-----------------------    syscalls.vsnprintf = &vsnprintf;
;** 688	-----------------------    syscalls.please_use_syscalls_puts = &loc_puts;
;** 689	-----------------------    syscalls.please_use_syscalls_printf = &loc_printf;
;** 690	-----------------------    syscalls.please_use_syscalls_vprintf = &loc_vprintf;
;** 693	-----------------------    syscalls.qdma_init = &qdma_init;
;** 694	-----------------------    syscalls.qdma_wait = &qdma_wait;
;** 695	-----------------------    syscalls.qdma_copy1d = &qdma_copy1d;
;** 696	-----------------------    syscalls.qdma_copy2d = &qdma_copy2d;
;** 697	-----------------------    syscalls.qdma_link1d = &qdma_link1d;
;** 698	-----------------------    syscalls.qdma_link2d = &qdma_link2d;
;**  	-----------------------    return;
           MVKL    .S1     _syscalls,A4
           MVK     .S1     0xd8,A6           ; |656| 

           STW     .D2T2   B3,*SP--(8)       ; |654| 
||         CALLP   .S2     _memset,B3
||         MVKH    .S1     _syscalls,A4
||         ZERO    .L2     B4                ; |656| 

$C$RL24:   ; CALL OCCURS {_memset} {0}       ; |656| 
;** --------------------------------------------------------------------------*
           MVKL    .S2     _mlb_panic,B6
           MVKL    .S2     _mlb_debug_usr,B4
           MVKL    .S2     _mlb_fastcall_initiate,B5
           MVKL    .S2     _BCACHE_inv,B8
           MVKH    .S2     _mlb_panic,B6
           MVKL    .S2     _BCACHE_wb,B7
           MVKH    .S2     _mlb_debug_usr,B4
           MVKL    .S2     _BCACHE_wbInv,B9
           MVKH    .S2     _mlb_fastcall_initiate,B5
           MVKL    .S2     _loc_printf,B18

           MVKL    .S1     _syscalls,A5
||         MVKL    .S2     _loc_vprintf,B17

           MVKH    .S1     _syscalls,A5
||         MVKL    .S2     _qdma_init,B16

           STW     .D1T2   B6,*A5            ; |659| 
||         MVKL    .S2     _loc_component_find_by_name,B6

           ADD     .L1     4,A5,A4
||         MVKH    .S2     _BCACHE_inv,B8

           STW     .D1T2   B4,*A4            ; |660| 
||         MVKL    .S2     _mlb_syscall_component_register,B4

           MVKH    .S2     _BCACHE_wb,B7
           MVKH    .S2     _BCACHE_wbInv,B9
           MVKH    .S2     _loc_component_find_by_name,B6

           ADD     .L1     8,A5,A3
||         MVKH    .S2     _mlb_syscall_component_register,B4

           STW     .D1T2   B5,*A3            ; |661| 
||         MVKL    .S2     _mlb_version,B5

           ADD     .L1     12,A5,A8
||         MVKH    .S2     _mlb_version,B5

           STW     .D1T2   B4,*A8            ; |662| 
||         MVKL    .S2     _BCACHE_invL1pAll,B4

           MVKH    .S2     _loc_printf,B18
           MVKH    .S2     _loc_vprintf,B17
           MVKH    .S2     _qdma_init,B16

           ADD     .L1     4,A8,A7
||         MVKH    .S2     _BCACHE_invL1pAll,B4

           STW     .D1T2   B6,*A7            ; |663| 
||         MVKL    .S2     _BCACHE_wbAll,B6

           ADD     .L1     8,A8,A3
||         MVKH    .S2     _BCACHE_wbAll,B6

           STW     .D1T2   B5,*A3            ; |664| 
||         MVKL    .S2     _BCACHE_wbInvAll,B5

           ADDAW   .D1     A3,11,A6
||         MVKH    .S2     _BCACHE_wbInvAll,B5

           STW     .D1T2   B8,*A6            ; |667| 
||         MVKL    .S2     _memset,B8

           ADD     .L1     4,A6,A5
||         MVKH    .S2     _memset,B8

           STW     .D1T2   B7,*A5            ; |668| 
||         MVKL    .S2     _loc_bzero,B7

           ADD     .L1     8,A6,A4
||         MVKH    .S2     _loc_bzero,B7

           STW     .D1T2   B9,*A4            ; |669| 
||         MVKL    .S2     _memcpy,B9

           ADD     .L1     12,A6,A3
||         MVKH    .S2     _memcpy,B9

           STW     .D1T2   B4,*A3            ; |670| 
||         MVKL    .S2     _BCACHE_wait,B4

           ADD     .L1     4,A3,A8
||         MVKH    .S2     _BCACHE_wait,B4

           STW     .D1T2   B6,*A8            ; |671| 
||         MVKL    .S2     _snprintf,B6

           ADD     .L1     8,A3,A7
||         MVKH    .S2     _snprintf,B6

           STW     .D1T2   B5,*A7            ; |672| 
||         MVKL    .S2     _vsnprintf,B5

           ADD     .L1     12,A3,A3
||         MVKH    .S2     _vsnprintf,B5

           STW     .D1T2   B4,*A3            ; |673| 
||         MVKL    .S2     _strncmp,B4

           ADDAD   .D1     A3,1,A6
||         MVKH    .S2     _strncmp,B4

           STW     .D1T2   B7,*A6            ; |676| 
||         MVKL    .S2     _strncpy,B7

           ADD     .L1     4,A6,A5
||         MVKH    .S2     _strncpy,B7

           STW     .D1T2   B8,*A5            ; |677| 
||         ADD     .L1     8,A6,A4
||         MVKL    .S2     _strstr,B8

           ADDAD   .D1     A4,3,A3
||         MVKH    .S2     _strstr,B8

           STW     .D1T2   B9,*A4            ; |678| 
||         MVKL    .S2     _strchr,B9

           STW     .D1T2   B4,*A3            ; |681| 
||         ADD     .L1     4,A3,A8
||         MVKH    .S2     _strchr,B9

           STW     .D1T2   B7,*A8            ; |682| 
||         ADD     .L1     8,A3,A7
||         MVKL    .S2     _strrchr,B4
||         ADD     .S1     12,A3,A6

           STW     .D1T2   B8,*A7            ; |683| 
||         MVKH    .S2     _strrchr,B4
||         ADD     .L1     12,A6,A3

           STW     .D1T2   B9,*A6            ; |684| 
||         ADD     .L1     12,A3,A7
||         MVKL    .S2     _qdma_copy2d,B7

           ADD     .L1     4,A6,A5
||         ADD     .S1     8,A6,A4
||         ADDAW   .D1     A7,7,A6
||         MVKH    .S2     _qdma_copy2d,B7

           STW     .D1T2   B4,*A5            ; |685| 
||         MVKL    .S2     _qdma_copy1d,B8

           STW     .D1T2   B6,*A4            ; |686| 
||         MVKL    .S2     _loc_puts,B4

           STW     .D1T2   B5,*A3            ; |687| 
||         MVKH    .S2     _loc_puts,B4
||         ADD     .L1     4,A3,A5

           STW     .D1T2   B4,*A5            ; |688| 
||         ADD     .L1     8,A3,A9
||         MVKH    .S2     _qdma_copy1d,B8

           STW     .D1T2   B18,*A9           ; |689| 
||         MVKL    .S2     _qdma_wait,B9

           STW     .D1T2   B17,*A7           ; |690| 
||         MVKH    .S2     _qdma_wait,B9

           STW     .D1T2   B16,*A6           ; |693| 
||         ADD     .L1     4,A6,A5
||         MVKL    .S2     _qdma_link1d,B6

           STW     .D1T2   B9,*A5            ; |694| 
||         ADD     .L1     8,A6,A8
||         MVKH    .S2     _qdma_link1d,B6

           STW     .D1T2   B8,*A8            ; |695| 
||         ADD     .L1     12,A6,A4
||         MVK     .S2     8,B5

           STW     .D1T2   B7,*A4            ; |696| 
||         MVKL    .S2     _qdma_link2d,B4
||         ADD     .L1     4,A4,A3

           STW     .D1T2   B6,*A3            ; |697| 
||         MVKH    .S2     _qdma_link2d,B4
||         ADD     .L2X    A4,B5,B5

           STW     .D2T2   B4,*B5            ; |698| 
           LDW     .D2T2   *++SP(8),B3       ; |710| 
           NOP             4
           RETNOP  .S2     B3,5              ; |710| 
           ; BRANCH OCCURS {B3}              ; |710| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_components_reset                                        *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,SP,A16,A17,A18,A19,A20,A21,A22,A23,A24, *
;*                           A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19,B20, *
;*                           B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31      *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,DP,SP,A16,A17,A18,A19,A20,A21,A22,A23,  *
;*                           A24,A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19, *
;*                           B20,B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31  *
;*   Local Frame Size  : 0 Args + 0 Auto + 4 Save = 4 byte                    *
;******************************************************************************
_loc_components_reset:
;** --------------------------------------------------------------------------*
;** 716	-----------------------    memset(&components, 0, 2496u);
;** 719	-----------------------    components[0] = component_mlb;
;** 720	-----------------------    (components[0]).component_id = 0u;
;** 722	-----------------------    num_core_components = 1u;
;**  	-----------------------    return;
           MVKL    .S2     _components,B5
           MVKH    .S2     _components,B5
           STW     .D2T2   B3,*SP--(8)       ; |714| 

           CALLP   .S2     _memset,B3
||         MV      .L1X    B5,A4             ; |716| 
||         ZERO    .L2     B4                ; |716| 
||         MVK     .S1     0x9c0,A6          ; |716| 

$C$RL25:   ; CALL OCCURS {_memset} {0}       ; |716| 
;** --------------------------------------------------------------------------*

           MVKL    .S2     _component_mlb,B4
||         MVKL    .S1     _components,A4

           MVKH    .S2     _component_mlb,B4
||         MVK     .S1     0x34,A6           ; |719| 

           CALLP   .S2     __strasgi_64plus,B3
||         MVKH    .S1     _components,A4

$C$RL26:   ; CALL OCCURS {__strasgi_64plus} {0}  ; |719| 
;** --------------------------------------------------------------------------*
           MVKL    .S2     _components+40,B4

           MVKH    .S2     _components+40,B4
||         ZERO    .L2     B5                ; |720| 

           STW     .D2T2   B5,*B4            ; |720| 
||         MVK     .L1     1,A3              ; |722| 

           STW     .D2T1   A3,*+DP(_num_core_components) ; |722| 
           LDW     .D2T2   *++SP(8),B3       ; |723| 
           NOP             4
           RETNOP  .S2     B3,5              ; |723| 
           ; BRANCH OCCURS {B3}              ; |723| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: loc_core_components_init                                    *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,B10,B11,SP,A16,A17,A18,A19,A20,A21,A22, *
;*                           A23,A24,A25,A26,A27,A28,A29,A30,A31,B16,B17,B18, *
;*                           B19,B20,B21,B22,B23,B24,B25,B26,B27,B28,B29,B30, *
;*                           B31                                              *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,B10,B11,DP,SP,A16,A17,A18,A19,A20,A21,  *
;*                           A22,A23,A24,A25,A26,A27,A28,A29,A30,A31,B16,B17, *
;*                           B18,B19,B20,B21,B22,B23,B24,B25,B26,B27,B28,B29, *
;*                           B30,B31                                          *
;*   Local Frame Size  : 0 Args + 0 Auto + 8 Save = 8 byte                    *
;******************************************************************************
_loc_core_components_init:
;** --------------------------------------------------------------------------*
;** 731	-----------------------    if ( (i = 0u) >= num_core_components ) goto g6;
           STW     .D2T2   B11,*SP--(8)      ; |727| 
           LDW     .D2T2   *+DP(_num_core_components),B4 ; |731| 
           MV      .L2     B3,B11            ; |727| 
           STW     .D2T2   B10,*+SP(4)       ; |727| 
           ZERO    .L2     B10               ; |731| 
           NOP             1

           CMPLTU  .L2     B10,B4,B0         ; |731| 
||         MVK     .S2     52,B4             ; |733| 

   [!B0]   BNOP    .S2     $C$L54,3          ; |731| 
||         MPYLI   .M2     B4,B10,B5:B4      ; |733| 
|| [ B0]   MVKL    .S1     _components,A3

   [ B0]   MVKH    .S1     _components,A3

           ADD     .L1X    A3,B4,A3          ; |733| 
||         MVK     .S2     52,B4             ; |735| 

           ; BRANCHCC OCCURS {$C$L54}        ; |731| 
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*      Disqualified loop: Loop contains control code
;*----------------------------------------------------------------------------*
$C$L51:    
;**	-----------------------g2:
;** 733	-----------------------    if ( NULL == (components[i]).fxns.init ) goto g5;
           LDW     .D1T1   *A3,A3            ; |733| 
           MPYLI   .M2     B4,B10,B5:B4      ; |735| 
           NOP             3
           CMPEQ   .L1     0,A3,A0           ; |733| 

   [!A0]   MVKL    .S1     _components,A3
|| [ A0]   B       .S2     $C$L52            ; |733| 

   [!A0]   MVKH    .S1     _components,A3

           ADD     .L1X    A3,B4,A3          ; |735| 
||         LDW     .D2T2   *+DP(_num_core_components),B4 ; |731| 

   [!A0]   LDW     .D1T1   *A3,A3            ; |735| 
   [ A0]   ADD     .L2     1,B10,B10         ; |731| 
           NOP             1
           ; BRANCHCC OCCURS {$C$L52}        ; |733| 
;** --------------------------------------------------------------------------*
;** 735	-----------------------    if ( (*(components[i]).fxns.init)() ) goto g5;
           NOP             2
           CALL    .S2X    A3                ; |735| 
           ADDKPC  .S2     $C$RL27,B3,4      ; |735| 
$C$RL27:   ; CALL OCCURS {A3} {0}            ; |735| 
;** --------------------------------------------------------------------------*
           MV      .L1     A4,A0             ; |735| 

   [ A0]   B       .S1     $C$L53            ; |735| 
|| [ A0]   LDW     .D2T2   *+DP(_num_core_components),B4 ; |731| 

   [!A0]   CALL    .S1     _mlb_panic        ; |738| 
   [ A0]   ADD     .L2     1,B10,B10         ; |731| 
           NOP             2
   [ A0]   CMPLTU  .L2     B10,B4,B0         ; |731| 
           ; BRANCHCC OCCURS {$C$L53}        ; |735| 
;** --------------------------------------------------------------------------*
;** 738	-----------------------    mlb_panic();
           ADDKPC  .S2     $C$RL28,B3,0      ; |738| 
$C$RL28:   ; CALL OCCURS {_mlb_panic} {0}    ; |738| 
           LDW     .D2T2   *+DP(_num_core_components),B4 ; |731| 
           ADD     .L2     1,B10,B10         ; |731| 
           NOP             2
;** --------------------------------------------------------------------------*
$C$L52:    
           NOP             1
           CMPLTU  .L2     B10,B4,B0         ; |731| 
;** --------------------------------------------------------------------------*
$C$L53:    
;**	-----------------------g5:
;** 731	-----------------------    if ( (++i) < num_core_components ) goto g2;

           MVK     .S2     52,B4             ; |733| 
|| [ B0]   MVKL    .S1     _components,A3

   [ B0]   BNOP    .S2     $C$L51,4          ; |731| 
||         MPYLI   .M2     B4,B10,B5:B4      ; |733| 
|| [ B0]   MVKH    .S1     _components,A3

           ADD     .L1X    A3,B4,A3          ; |733| 
|| [ B0]   MVK     .S2     52,B4             ; |735| 

           ; BRANCHCC OCCURS {$C$L51}        ; |731| 
;** --------------------------------------------------------------------------*
;**	-----------------------g6:
;**  	-----------------------    return;
;** --------------------------------------------------------------------------*
$C$L54:    
           MV      .L2     B11,B3            ; |744| 

           RET     .S2     B3                ; |744| 
||         LDW     .D2T2   *+SP(4),B10       ; |744| 

           LDW     .D2T2   *++SP(8),B11      ; |744| 
           NOP             4
           ; BRANCH OCCURS {B3}              ; |744| 
	.sect	".text"
	.clink
	.global	_loc_its_alive

;******************************************************************************
;* FUNCTION NAME: loc_its_alive                                               *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,A16,A17,A18,A19,A20,A21,A22,A23,A24,A25,*
;*                           A26,A27,A28,A29,A30,A31,B16,B17,B18,B19,B20,B21, *
;*                           B22,B23,B24,B25,B26,B27,B28,B29,B30,B31          *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,DP,SP,A16,A17,A18,A19,A20,A21,A22,A23,  *
;*                           A24,A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19, *
;*                           B20,B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31  *
;*   Local Frame Size  : 0 Args + 0 Auto + 4 Save = 4 byte                    *
;******************************************************************************
_loc_its_alive:
;** --------------------------------------------------------------------------*
;** 755	-----------------------    resetBuf = (unsigned *)dsp_config.reset_vector.phys_addr+128u;
;** 757	-----------------------    if ( (i = 0u) >= 16u ) goto g3;
           MVKL    .S1     _dsp_config,A3
           MVKH    .S1     _dsp_config,A3

           LDW     .D1T1   *A3,A4            ; |755| 
||         ZERO    .L1     A3                ; |757| 

           MVK     .S2     16,B4             ; |757| 
           CMPLTU  .L2X    A3,B4,B0          ; |757| 
   [!B0]   BNOP    .S1     $C$L56,4          ; |757| 
           ADDAD   .D1     A4,16,A4          ; |755| 
           ; BRANCHCC OCCURS {$C$L56}        ; |757| 
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
$C$L55:    
;**	-----------------------g2:
;** 759	-----------------------    resetBuf[i] = 0u;
;** 757	-----------------------    if ( (++i) < 16u ) goto g2;
           ZERO    .L1     A5                ; |759| 

           STW     .D1T1   A5,*+A4[A3]       ; |759| 
||         ADD     .L1     1,A3,A3           ; |757| 

           CMPLTU  .L1     A3,16,A0          ; |757| 
   [ A0]   BNOP    .S1     $C$L55,5          ; |757| 
           ; BRANCHCC OCCURS {$C$L55}        ; |757| 
;** --------------------------------------------------------------------------*
$C$L56:    
;**	-----------------------g3:
;** 762	-----------------------    if ( (i = 16u) >= 992u ) goto g5;
           MVK     .S1     992,A5            ; |762| 
           MVK     .S1     0x10,A3           ; |762| 
           CMPLTU  .L1     A3,A5,A0          ; |762| 
   [!A0]   BNOP    .S1     $C$L58,5          ; |762| 
           ; BRANCHCC OCCURS {$C$L58}        ; |762| 
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
$C$L57:    
;**	-----------------------g4:
;** 764	-----------------------    resetBuf[i] = i;
;** 762	-----------------------    if ( (++i) < 992u ) goto g4;

           STW     .D1T1   A3,*+A4[A3]       ; |764| 
||         ADD     .L1     1,A3,A3           ; |762| 

           CMPLTU  .L1     A3,A5,A0          ; |762| 
   [ A0]   BNOP    .S1     $C$L57,5          ; |762| 
           ; BRANCHCC OCCURS {$C$L57}        ; |762| 
;** --------------------------------------------------------------------------*
$C$L58:    
;**	-----------------------g5:
;** 768	-----------------------    ((volatile unsigned *)mlb_sram)[1] = 0u;
;** 771	-----------------------    BCACHE_wbAll();
;**  	-----------------------    return;
           CALLRET .S1     _BCACHE_wbAll     ; |771| 
           MVKL    .S1     _mlb_sram+4,A4
           MVKH    .S1     _mlb_sram+4,A4
           ZERO    .L1     A3                ; |768| 
           STW     .D1T1   A3,*A4            ; |768| 
           NOP             1
$C$RL29:   ; CALL-RETURN OCCURS {_BCACHE_wbAll} 0  ; |771| 
	.sect	".text"
	.clink
	.global	_mlb_irq_handler

;******************************************************************************
;* FUNCTION NAME: mlb_irq_handler                                             *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,SP,A16,A17,A18,A19,A20,A21,A22,A23,A24, *
;*                           A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19,B20, *
;*                           B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31      *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,DP,SP,A16,A17,A18,A19,A20,A21,A22,A23,  *
;*                           A24,A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19, *
;*                           B20,B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31  *
;*   Local Frame Size  : 0 Args + 0 Auto + 4 Save = 4 byte                    *
;******************************************************************************
_mlb_irq_handler:
;** --------------------------------------------------------------------------*
;** 782	-----------------------    *(volatile unsigned *)0x4809410cu = 0u;
;** 785	-----------------------    *(volatile unsigned *)0x48094108u = 1u;
;** 789	-----------------------    if ( !(numMsg = *(volatile unsigned *)0x480940c0u&7u) ) goto g4;

           MVKL    .S1     0x4809410c,A5
||         STW     .D2T2   B3,*SP--(8)       ; |776| 
||         MVK     .L2     1,B4              ; |785| 
||         ZERO    .L1     A4                ; |782| 

           MVKH    .S1     0x4809410c,A5
           STW     .D1T1   A4,*A5            ; |782| 

           ADD     .L2X    -4,A5,B5
||         SUBAW   .D1     A5,19,A3

           STW     .D2T2   B4,*B5            ; |785| 
           LDW     .D1T1   *A3,A3            ; |789| 
           MV      .L2X    A4,B4             ; |789| 
           NOP             3
           AND     .L2X    7,A3,B0           ; |789| 

           CMPLTU  .L2X    A4,B0,B1          ; |795| 
|| [!B0]   B       .S1     $C$L60            ; |789| 

   [!B0]   MVK     .L2     0x1,B1            ; nullify predicate
   [!B1]   BNOP    .S1     $C$L60,3          ; |795| 
           ; BRANCHCC OCCURS {$C$L60}        ; |789| 
;** --------------------------------------------------------------------------*
;** 795	-----------------------    if ( (fifoIdx = 0u) >= numMsg ) goto g4;
           NOP             2
           ; BRANCHCC OCCURS {$C$L60}        ; |795| 
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
$C$L59:    
;**	-----------------------g3:
;** 797	-----------------------    mlb_inbox[fifoIdx] = *(volatile unsigned *)0x48094040u;
;** 795	-----------------------    if ( (++fifoIdx) < numMsg ) goto g3;
           MVK     .S1     204,A3
           SUB     .L1     A5,A3,A3
           LDW     .D1T1   *A3,A3            ; |797| 
           MVKL    .S2     _mlb_inbox,B5
           MVKH    .S2     _mlb_inbox,B5
           NOP             2

           STW     .D2T1   A3,*+B5[B4]       ; |797| 
||         ADD     .L2     1,B4,B4           ; |795| 

           CMPLTU  .L2     B4,B0,B1          ; |795| 
   [ B1]   BNOP    .S1     $C$L59,5          ; |795| 
           ; BRANCHCC OCCURS {$C$L59}        ; |795| 
;** --------------------------------------------------------------------------*
$C$L60:    
;**	-----------------------g4:
;** 811	-----------------------    int_irq_clear(10u);
;** 813	-----------------------    int_event_clear(55u);
;** 815	-----------------------    C64_clearIFR(1024u);
;** 820	-----------------------    BCACHE_wbInvAll();
;** 822	-----------------------    num_irqs = num_irqs+1u;
;**  	-----------------------    return;

           CALLP   .S2     _int_irq_clear,B3
||         MVK     .L1     0xa,A4            ; |811| 

$C$RL30:   ; CALL OCCURS {_int_irq_clear} {0}  ; |811| 
;** --------------------------------------------------------------------------*

           CALLP   .S2     _int_event_clear,B3
||         MVK     .S1     0x37,A4           ; |813| 

$C$RL31:   ; CALL OCCURS {_int_event_clear} {0}  ; |813| 

           CALLP   .S2     _C64_clearIFR,B3
||         MVK     .S1     0x400,A4          ; |815| 

$C$RL32:   ; CALL OCCURS {_C64_clearIFR} {0}  ; |815| 
           CALLP   .S2     _BCACHE_wbInvAll,B3
$C$RL33:   ; CALL OCCURS {_BCACHE_wbInvAll} {0}  ; |820| 
;** --------------------------------------------------------------------------*
           LDW     .D2T2   *+DP(_num_irqs),B4 ; |822| 
           NOP             4
           ADD     .L2     1,B4,B4           ; |822| 
           STW     .D2T2   B4,*+DP(_num_irqs) ; |822| 
           LDW     .D2T2   *++SP(8),B3       ; |825| 
           NOP             4
           RETNOP  .S2     B3,5              ; |825| 
           ; BRANCH OCCURS {B3}              ; |825| 
	.sect	".text"
	.clink
	.global	_mlb_send_to_gpp

;******************************************************************************
;* FUNCTION NAME: mlb_send_to_gpp                                             *
;*                                                                            *
;*   Regs Modified     : A3,B4                                                *
;*   Regs Used         : A3,B3,B4                                             *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_mlb_send_to_gpp:
;** --------------------------------------------------------------------------*
;** 831	-----------------------    *(volatile unsigned *)0x48094044u = ~mlb_inbox[0];
;**  	-----------------------    return;
           MVKL    .S1     _mlb_inbox,A3
           MVKH    .S1     _mlb_inbox,A3
           LDW     .D1T1   *A3,A3            ; |831| 
           RETNOP  .S2     B3,2              ; |832| 
           MVKL    .S2     0x48094044,B4

           NOT     .L1     A3,A3             ; |831| 
||         MVKH    .S2     0x48094044,B4

           STW     .D2T1   A3,*B4            ; |831| 
           ; BRANCH OCCURS {B3}              ; |832| 
	.sect	".text"
	.clink

;******************************************************************************
;* FUNCTION NAME: mlb_task__entry                                             *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B0,B1,B2,  *
;*                           B3,B4,B5,B6,B7,B8,B9,B10,SP,A16,A17,A18,A19,A20, *
;*                           A21,A22,A23,A24,A25,A26,A27,A28,A29,A30,A31,B16, *
;*                           B17,B18,B19,B20,B21,B22,B23,B24,B25,B26,B27,B28, *
;*                           B29,B30,B31                                      *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B0,B1, *
;*                           B2,B3,B4,B5,B6,B7,B8,B9,B10,DP,SP,A16,A17,A18,   *
;*                           A19,A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,A30, *
;*                           A31,B16,B17,B18,B19,B20,B21,B22,B23,B24,B25,B26, *
;*                           B27,B28,B29,B30,B31                              *
;*   Local Frame Size  : 0 Args + 16 Auto + 24 Save = 40 byte                 *
;******************************************************************************
_mlb_task__entry:
;** --------------------------------------------------------------------------*
;** 838	-----------------------    num_irqs = 0u;
;** 839	-----------------------    num_msg_recvd = 0u;
;** 884	-----------------------    iterCount = 0x10000000u;
;** 888	-----------------------    HWI_disable();
;** 891	-----------------------    HWI_eventMap(10, 55);
;** 897	-----------------------    HWI_dispatchPlug(10, (int (*)())&mlb_irq_handler, (-1), NULL);
;** 907	-----------------------    *(volatile unsigned *)0x1c21080u = 0xffffffffu;
;** 908	-----------------------    *(volatile unsigned *)0x1c21084u = 0xffffffffu;
;** 909	-----------------------    *(volatile unsigned *)0x1c21088u = 0xffffffffu;
;** 913	-----------------------    *(volatile unsigned *)0x1c21070u = 1024u;
;** 915	-----------------------    num_irqs = 0x20000000u;
;** 917	-----------------------    HWI_enable();
;** 922	-----------------------    *(volatile unsigned *)0x4809410cu = 1u;
;** 929	-----------------------    C64_clearIFR(1024u);
;** 930	-----------------------    C64_enableIER(1024u);
;** 937	-----------------------    if ( i = 0u , 0 ) goto g3;
           STW     .D2T2   B10,*SP--(8)      ; |836| 
           STDW    .D2T1   A13:A12,*SP--     ; |836| 

           STDW    .D2T1   A11:A10,*SP--     ; |836| 
||         ZERO    .L1     A3                ; |838| 

           STW     .D2T1   A3,*+DP(_num_irqs) ; |838| 
           SUB     .D2     SP,16,SP          ; |836| 

           CALLP   .S2     _HWI_disable,B3
||         STW     .D2T1   A3,*+DP(_num_msg_recvd) ; |839| 

$C$RL34:   ; CALL OCCURS {_HWI_disable} {0}  ; |888| 
;** --------------------------------------------------------------------------*
           MVK     .S2     0x37,B4           ; |891| 

           CALLP   .S2     _HWI_eventMap,B3
||         MVK     .L1     0xa,A4            ; |891| 

$C$RL35:   ; CALL OCCURS {_HWI_eventMap} {0}  ; |891| 
           MVKL    .S2     _mlb_irq_handler,B4
           MVKH    .S2     _mlb_irq_handler,B4

           CALLP   .S2     _HWI_dispatchPlug,B3
||         MVK     .L1     0xffffffff,A6     ; |897| 
||         ZERO    .L2     B6                ; |897| 
||         MVK     .S1     0xa,A4            ; |897| 

$C$RL36:   ; CALL OCCURS {_HWI_dispatchPlug} {0}  ; |897| 
           MVKL    .S2     0x1c21080,B5

           MVK     .L1     -1,A4             ; |907| 
||         MVKH    .S2     0x1c21080,B5

           STW     .D2T1   A4,*B5            ; |907| 
||         ADD     .L2     8,B5,B4

           ADD     .L2     4,B5,B6
||         MV      .S2X    A4,B5             ; |907| 
||         SUBAW   .D2     B4,6,B7

           STW     .D2T2   B5,*B6            ; |908| 

           STW     .D2T2   B5,*B4            ; |909| 
||         MVK     .S2     1024,B4           ; |913| 
||         ZERO    .L1     A3

           STW     .D2T2   B4,*B7            ; |913| 
||         SET     .S1     A3,0x1d,0x1d,A3

           CALLP   .S2     _HWI_enable,B3
||         STW     .D2T1   A3,*+DP(_num_irqs) ; |915| 

$C$RL37:   ; CALL OCCURS {_HWI_enable} {0}   ; |917| 
           MVKL    .S1     0x4809410c,A3

           MVKH    .S1     0x4809410c,A3
||         MVK     .L2     1,B4              ; |922| 

           CALLP   .S2     _C64_clearIFR,B3
||         STW     .D1T2   B4,*A3            ; |922| 
||         MVK     .S1     0x400,A4          ; |929| 

$C$RL38:   ; CALL OCCURS {_C64_clearIFR} {0}  ; |929| 

           CALLP   .S2     _C64_enableIER,B3
||         MVK     .S1     0x400,A4          ; |930| 

$C$RL39:   ; CALL OCCURS {_C64_enableIER} {0}  ; |930| 
;** --------------------------------------------------------------------------*
           MVKL    .S2     0xff36,B5
           MVKL    .S2     0x184ae00,B4

           MVKH    .S2     0xff36,B5
||         ZERO    .L1     A11

           MVKH    .S2     0x184ae00,B4
||         SET     .S1     A11,0x1c,0x1c,A11
||         ZERO    .L2     B0                ; |937| 

;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
$C$L61:    
;**	-----------------------g2:
;** 940	-----------------------    *((volatile unsigned *)(i*4u)+0x184ae00u) = 65334u;
;** 957	-----------------------    if ( !(++i) ) goto g2;

           STW     .D2T2   B5,*+B4[B0]       ; |940| 
||         ADD     .L2     1,B0,B0           ; |957| 

   [!B0]   BNOP    .S2     $C$L61,4          ; |957| 
|| [ B0]   ZERO    .L1     A3                ; |968| 
|| [ B0]   MVK     .S1     64,A4             ; |968| 

   [ B0]   CMPLTU  .L1     A3,A4,A0          ; |968| 
           ; BRANCHCC OCCURS {$C$L61}        ; |957| 
;** --------------------------------------------------------------------------*
;**	-----------------------g3:
;** 968	-----------------------    if ( (i = 0u) >= 64u ) goto g5;
   [!A0]   BNOP    .S1     $C$L63,5          ; |968| 
           ; BRANCHCC OCCURS {$C$L63}        ; |968| 
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
$C$L62:    
;**	-----------------------g4:
;** 970	-----------------------    mlb_sram[i] = i;
;** 968	-----------------------    if ( (++i) < 64u ) goto g4;
           MVKL    .S1     _mlb_sram,A4
           MVKH    .S1     _mlb_sram,A4

           STB     .D1T1   A3,*+A3[A4]       ; |970| 
||         ADD     .L1     1,A3,A3           ; |968| 

           MVK     .S2     64,B4             ; |968| 
           CMPLTU  .L2X    A3,B4,B0          ; |968| 
   [ B0]   BNOP    .S1     $C$L62,5          ; |968| 
           ; BRANCHCC OCCURS {$C$L62}        ; |968| 
;** --------------------------------------------------------------------------*
$C$L63:    
;**	-----------------------g5:
;** 978	-----------------------    mlb_inbox[3] = 0u;
;** 980	-----------------------    if ( (i = 0u) >= 64u ) goto g7;

           MVK     .S2     64,B5             ; |980| 
||         ZERO    .L2     B4                ; |978| 

           CMPLTU  .L2     B4,B5,B0          ; |980| 
   [!B0]   BNOP    .S1     $C$L65,2          ; |980| 
           MVKL    .S1     _mlb_inbox+12,A4

           MVKH    .S1     _mlb_inbox+12,A4
||         ZERO    .L1     A3                ; |978| 

           STW     .D1T1   A3,*A4            ; |978| 
           ; BRANCHCC OCCURS {$C$L65}        ; |980| 
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*----------------------------------------------------------------------------*
$C$L64:    
;**	-----------------------g6:
;** 982	-----------------------    mlb_inbox[3] += mlb_sram[i];
;** 980	-----------------------    if ( (++i) < 64u ) goto g6;

           MVKL    .S2     _mlb_sram,B5
||         MVKL    .S1     _mlb_inbox,A3

           MVKH    .S2     _mlb_sram,B5
||         MVKH    .S1     _mlb_inbox,A3

           LDBU    .D2T2   *+B4[B5],B5       ; |982| 
||         ADD     .L2     1,B4,B4           ; |980| 
||         MVK     .S2     64,B6             ; |980| 

           LDW     .D1T1   *+A3(12),A4       ; |982| 
||         CMPLTU  .L2     B4,B6,B0          ; |980| 

   [ B0]   BNOP    .S1     $C$L64,3          ; |980| 
           ADD     .L2X    B5,A4,B5          ; |982| 
           STW     .D1T2   B5,*+A3(12)       ; |982| 
           ; BRANCHCC OCCURS {$C$L64}        ; |980| 
;** --------------------------------------------------------------------------*
$C$L65:    
;**	-----------------------g7:
;** 986	-----------------------    loc_debug(0x7100001u);
;** 989	-----------------------    mlb_logbuf = (char *)0x86002000u;
;** 990	-----------------------    mlb_logbuf_offset_writep = (volatile unsigned *)0x86006000u;
;** 993	-----------------------    if ( mlb_resume() ) goto g11;
           MVKL    .S1     0x7100001,A4

           CALLP   .S2     _loc_debug,B3
||         MVKH    .S1     0x7100001,A4

$C$RL40:   ; CALL OCCURS {_loc_debug} {0}    ; |986| 
;** --------------------------------------------------------------------------*
           MVKL    .S1     0x86002000,A3

           MVKL    .S2     0x86006000,B4
||         MVKH    .S1     0x86002000,A3

           MVKH    .S2     0x86006000,B4
||         STW     .D2T1   A3,*+DP(_mlb_logbuf) ; |989| 

           CALLP   .S2     _mlb_resume,B3
||         STW     .D2T2   B4,*+DP(_mlb_logbuf_offset_writep) ; |990| 

$C$RL41:   ; CALL OCCURS {_mlb_resume} {0}   ; |993| 
;** --------------------------------------------------------------------------*
           MV      .L1     A4,A0             ; |993| 
   [ A0]   B       .S1     $C$L67            ; |993| 
   [ A0]   CALL    .S1     _loc_debug        ; |1027| 
   [!A0]   CALL    .S1     _loc_syscalls_init ; |995| 
   [ A0]   MVKL    .S1     0x7000001,A4
           NOP             2
           ; BRANCHCC OCCURS {$C$L67}        ; |993| 
;** --------------------------------------------------------------------------*
;** 995	-----------------------    loc_syscalls_init();
;** 998	-----------------------    loc_debug(0x7110001u);
;* 1001	-----------------------    loc_components_reset();
;* 1004	-----------------------    loc_debug(0x7110002u);
;* 1007	-----------------------    if ( core_components_register() ) goto g10;
           ADDKPC  .S2     $C$RL42,B3,1      ; |995| 
$C$RL42:   ; CALL OCCURS {_loc_syscalls_init} {0}  ; |995| 
;** --------------------------------------------------------------------------*
           MVKL    .S1     0x7110001,A4

           CALLP   .S2     _loc_debug,B3
||         MVKH    .S1     0x7110001,A4

$C$RL43:   ; CALL OCCURS {_loc_debug} {0}    ; |998| 
           CALLP   .S2     _loc_components_reset,B3
$C$RL44:   ; CALL OCCURS {_loc_components_reset} {0}  ; |1001| 
           MVKL    .S1     0x7110002,A4

           CALLP   .S2     _loc_debug,B3
||         MVKH    .S1     0x7110002,A4

$C$RL45:   ; CALL OCCURS {_loc_debug} {0}    ; |1004| 
           CALLP   .S2     _core_components_register,B3
$C$RL46:   ; CALL OCCURS {_core_components_register} {0}  ; |1007| 
;** --------------------------------------------------------------------------*
           MV      .L1     A4,A0             ; |1007| 
   [ A0]   B       .S1     $C$L66            ; |1007| 
   [!A0]   CALL    .S1     _loc_debug        ; |1010| 
   [ A0]   CALL    .S1     _loc_debug        ; |1017| 
           MVKL    .S1     0x7110ffff,A4
           MVKH    .S1     0x7110ffff,A4
   [ A0]   MVKL    .S1     0x7110003,A4
           ; BRANCHCC OCCURS {$C$L66}        ; |1007| 
;** --------------------------------------------------------------------------*
;* 1010	-----------------------    loc_debug(0x7110ffffu);
;* 1013	-----------------------    mlb_panic();
           ADDKPC  .S2     $C$RL47,B3,0      ; |1010| 
$C$RL47:   ; CALL OCCURS {_loc_debug} {0}    ; |1010| 
;** --------------------------------------------------------------------------*
           CALLP   .S2     _mlb_panic,B3
$C$RL48:   ; CALL OCCURS {_mlb_panic} {0}    ; |1013| 
           CALL    .S1     _loc_debug        ; |1017| 
           MVKL    .S1     0x7110003,A4
           NOP             2
;** --------------------------------------------------------------------------*
$C$L66:    
;**	-----------------------g10:
;* 1017	-----------------------    loc_debug(0x7110003u);
;* 1020	-----------------------    loc_core_components_init();
           ADDKPC  .S2     $C$RL49,B3,0      ; |1017| 
           MVKH    .S1     0x7110003,A4
$C$RL49:   ; CALL OCCURS {_loc_debug} {0}    ; |1017| 
;** --------------------------------------------------------------------------*
           CALLP   .S2     _loc_core_components_init,B3
$C$RL50:   ; CALL OCCURS {_loc_core_components_init} {0}  ; |1020| 
           CALL    .S1     _loc_debug        ; |1027| 
           MVKL    .S1     0x7000001,A4
           NOP             3
;** --------------------------------------------------------------------------*
$C$L67:    
;**	-----------------------g11:
;* 1027	-----------------------    loc_debug(0x7000001u);
;* 1031	-----------------------    loc_its_alive();
;* 1035	-----------------------    loc_debug(0x7000002u);
;* 1038	-----------------------    mlb_debug_usr(0u, 0xccddccddu);
;* 1039	-----------------------    mlb_debug_usr(1u, 0xccddccddu);
;* 1040	-----------------------    mlb_debug_usr(2u, 0xccddccddu);
;* 1041	-----------------------    mlb_debug_usr(3u, 0xccddccddu);
;* 1044	-----------------------    *(volatile unsigned *)0x1810000u |= 0x10000u;
;* 1047	-----------------------    ((volatile unsigned *)mlb_sram)[12256] = 0u;
;* 1048	-----------------------    ((volatile unsigned *)mlb_sram)[12272] = 0u;
;* 1051	-----------------------    oldNumIrqs = num_irqs;
;* 1052	-----------------------    oldMsgSerial = 0u;

           MVKH    .S1     0x7000001,A4
||         ADDKPC  .S2     $C$RL51,B3,0      ; |1027| 

$C$RL51:   ; CALL OCCURS {_loc_debug} {0}    ; |1027| 
;** --------------------------------------------------------------------------*
           CALLP   .S2     _loc_its_alive,B3
$C$RL52:   ; CALL OCCURS {_loc_its_alive} {0}  ; |1031| 
           MVKL    .S1     0x7000002,A4

           CALLP   .S2     _loc_debug,B3
||         MVKH    .S1     0x7000002,A4

$C$RL53:   ; CALL OCCURS {_loc_debug} {0}    ; |1035| 
           MVKL    .S2     0xccddccdd,B4
           MVKH    .S2     0xccddccdd,B4

           CALLP   .S2     _mlb_debug_usr,B3
||         ZERO    .L1     A4                ; |1038| 

$C$RL54:   ; CALL OCCURS {_mlb_debug_usr} {0}  ; |1038| 
           MVKL    .S2     0xccddccdd,B4
           MVKH    .S2     0xccddccdd,B4

           CALLP   .S2     _mlb_debug_usr,B3
||         MVK     .L1     0x1,A4            ; |1039| 

$C$RL55:   ; CALL OCCURS {_mlb_debug_usr} {0}  ; |1039| 
           MVKL    .S2     0xccddccdd,B4
           MVKH    .S2     0xccddccdd,B4

           CALLP   .S2     _mlb_debug_usr,B3
||         MVK     .L1     0x2,A4            ; |1040| 

$C$RL56:   ; CALL OCCURS {_mlb_debug_usr} {0}  ; |1040| 
           MVKL    .S2     0xccddccdd,B4
           MVKH    .S2     0xccddccdd,B4

           CALLP   .S2     _mlb_debug_usr,B3
||         MVK     .L1     0x3,A4            ; |1041| 

$C$RL57:   ; CALL OCCURS {_mlb_debug_usr} {0}  ; |1041| 
;** --------------------------------------------------------------------------*
           ZERO    .L1     A4
           MVKH    .S1     0x1810000,A4
           LDW     .D1T1   *A4,A3            ; |1044| 
           MVKL    .S2     _mlb_sram+49024,B6
           MVKH    .S2     _mlb_sram+49024,B6
           ZERO    .L2     B5                ; |1047| 
           ADDAD   .D2     B6,8,B4
           SET     .S1     A3,16,16,A3       ; |1044| 

           STW     .D1T1   A3,*A4            ; |1044| 
||         STW     .D2T2   B5,*B6            ; |1047| 

           STW     .D2T2   B5,*B4            ; |1048| 

           LDW     .D2T2   *+DP(_num_irqs),B10 ; |1051| 
||         ZERO    .L1     A10               ; |1047| 

;** --------------------------------------------------------------------------*
;**   BEGIN LOOP $C$L68
;** --------------------------------------------------------------------------*
$C$L68:    
;**	-----------------------g12:
;* 1058	-----------------------    asm(" NOP\n");
;* 1059	-----------------------    asm(" NOP\n");
;* 1060	-----------------------    asm(" NOP\n");
;* 1061	-----------------------    asm(" NOP\n");
;* 1062	-----------------------    asm(" NOP\n");
;* 1063	-----------------------    asm(" NOP\n");
;* 1064	-----------------------    asm(" NOP\n");
;* 1065	-----------------------    asm(" NOP\n");
;* 1067	-----------------------    asm(" IDLE\n");
;* 1069	-----------------------    asm(" NOP\n");
;* 1070	-----------------------    asm(" NOP\n");
;* 1071	-----------------------    asm(" NOP\n");
;* 1072	-----------------------    asm(" NOP\n");
;* 1073	-----------------------    asm(" NOP\n");
;* 1074	-----------------------    asm(" NOP\n");
;* 1075	-----------------------    asm(" NOP\n");
;* 1076	-----------------------    asm(" NOP\n");
;* 1079	-----------------------    if ( num_irqs == oldNumIrqs ) goto g32;
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 IDLE
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
           LDW     .D2T2   *+DP(_num_irqs),B4 ; |1079| 
           NOP             4
           CMPEQ   .L2     B4,B10,B0         ; |1079| 

   [ B0]   B       .S2     $C$L80            ; |1079| 
|| [ B0]   MVKL    .S1     _mlb_sram+24,A3
|| [ B0]   ADD     .L1     1,A11,A11         ; |1372| 

   [!B0]   CALL    .S2     _loc_debug        ; |1084| 
|| [ B0]   MVKH    .S1     _mlb_sram+24,A3

   [ B0]   B       .S2     $C$L68            ; |1378| 
|| [ B0]   STW     .D1T1   A11,*A3           ; |1372| 
|| [!B0]   MVKL    .S1     0x7000003,A4

           NOP             3
           ; BRANCHCC OCCURS {$C$L80}        ; |1079| 
;** --------------------------------------------------------------------------*
;* 1084	-----------------------    loc_debug(0x7000003u);
;* 1087	-----------------------    oldNumIrqs = num_irqs;
;* 1089	-----------------------    newMsgSerial = ((volatile unsigned *)mlb_sram)[0];
;* 1092	-----------------------    ((volatile unsigned *)mlb_sram)[5] = num_irqs;
;* 1096	-----------------------    loc_debug(0x7000004u);
;* 1099	-----------------------    if ( oldMsgSerial == newMsgSerial ) goto g32;

           MVKH    .S1     0x7000003,A4
||         ADDKPC  .S2     $C$RL58,B3,0      ; |1084| 

$C$RL58:   ; CALL OCCURS {_loc_debug} {0}    ; |1084| 
;** --------------------------------------------------------------------------*
           MVKL    .S1     _mlb_sram,A3

           MVKH    .S1     _mlb_sram,A3
||         LDW     .D2T2   *+DP(_num_irqs),B10 ; |1087| 

           LDW     .D1T1   *A3,A6            ; |1089| 
||         LDW     .D2T2   *+DP(_num_irqs),B4 ; |1092| 

           MVK     .S2     20,B5
           ADD     .L2X    A3,B5,B5
           ADD     .L1     1,A4,A4
           NOP             1

           CALLP   .S2     _loc_debug,B3
||         STW     .D2T2   B4,*B5            ; |1092| 

$C$RL59:   ; CALL OCCURS {_loc_debug} {0}    ; |1096| 
;** --------------------------------------------------------------------------*
           CMPEQ   .L1     A10,A6,A0         ; |1099| 
   [ A0]   B       .S1     $C$L79            ; |1099| 
   [!A0]   CALL    .S1     _loc_debug        ; |1108| 
           NOP             4
           ; BRANCHCC OCCURS {$C$L79}        ; |1099| 
;** --------------------------------------------------------------------------*
;* 1105	-----------------------    oldMsgSerial = newMsgSerial;
;* 1108	-----------------------    loc_debug(0x7000005u);
;* 1114	-----------------------    compAndCmd = ((volatile unsigned *)mlb_sram)[1];
;* 1116	-----------------------    comp = loc_component_find_by_id((unsigned short)compAndCmd);
;* 1129	-----------------------    if ( NULL == comp ) goto g30;

           ADD     .L1     1,A4,A4
||         ADDKPC  .S2     $C$RL60,B3,0      ; |1108| 

$C$RL60:   ; CALL OCCURS {_loc_debug} {0}    ; |1108| 
;** --------------------------------------------------------------------------*
           MVK     .S1     16,A3
           SUB     .L1X    B5,A3,A3
           LDW     .D1T1   *A3,A7            ; |1114| 
           NOP             4

           CALLP   .S2     _loc_component_find_by_id,B3
||         EXTU    .S1     A7,16,16,A4       ; |1116| 

$C$RL61:   ; CALL OCCURS {_loc_component_find_by_id} {0}  ; |1116| 
;** --------------------------------------------------------------------------*

           CMPEQ   .L1     0,A4,A0           ; |1129| 
||         SUBAW   .D2     B5,3,B4
||         MV      .S1     A4,A11            ; |1116| 
||         MV      .D1     A6,A10            ; |1105| 

   [ A0]   B       .S1     $C$L76            ; |1129| 

           ADD     .L1X    4,B4,A3
|| [!A0]   LDW     .D2T2   *B4,B4            ; |1145| 

   [!A0]   LDW     .D1T1   *A3,A6            ; |1145| 
   [!A0]   LDW     .D1T1   *+A11(4),A3       ; |1145| 
   [ A0]   ZERO    .L1     A12
   [ A0]   SET     .S1     A12,0x1c,0x1c,A12
           ; BRANCHCC OCCURS {$C$L76}        ; |1129| 
;** --------------------------------------------------------------------------*
;* 1145	-----------------------    err = (*(*comp).fxns.exec)((unsigned short)(compAndCmd>>16u), ((volatile unsigned *)mlb_sram)[2], ((volatile unsigned *)mlb_sram)[3], &r1, &r2);
;* 1153	-----------------------    ((volatile unsigned *)mlb_sram)[2] = r1;
;* 1154	-----------------------    ((volatile unsigned *)mlb_sram)[3] = r2;
;* 1156	-----------------------    ((volatile unsigned *)mlb_sram)[4] = err;
;* 1158	-----------------------    if ( err ) goto g29;
           SHRU    .S1     A7,16,A4          ; |1145| 
           ADD     .L1X    8,SP,A8           ; |1145| 
           CALL    .S2X    A3                ; |1145| 
           ADD     .L2     4,SP,B6           ; |1145| 
           ADDKPC  .S2     $C$RL62,B3,3      ; |1145| 
$C$RL62:   ; CALL OCCURS {A3} {0}            ; |1145| 
;** --------------------------------------------------------------------------*
           LDW     .D2T2   *+SP(4),B4        ; |1153| 
           MVKL    .S2     _mlb_sram+8,B5
           MVKH    .S2     _mlb_sram+8,B5
           MV      .L1     A4,A0             ; |1145| 
           ADD     .L1X    4,B5,A3

           STW     .D2T2   B4,*B5            ; |1153| 
||         ADD     .L2     8,B5,B5

           LDW     .D2T2   *+SP(8),B4        ; |1154| 
   [ A0]   B       .S1     $C$L75            ; |1158| 
           NOP             3

           STW     .D1T2   B4,*A3            ; |1154| 
|| [ A0]   MV      .L2     B5,B4
|| [!A0]   MVKL    .S1     _mlb_sram+49088,A3

           STW     .D2T1   A0,*B5            ; |1156| 
|| [ A0]   MVK     .S1     12,A3

           ; BRANCHCC OCCURS {$C$L75}        ; |1158| 
;** --------------------------------------------------------------------------*
;* 1162	-----------------------    rpcDebug = r1<<24u>>16|0x70000000u;
;* 1167	-----------------------    if ( ((volatile unsigned *)mlb_sram)[12272] != 1u ) goto g31;

           MVKH    .S1     _mlb_sram+49088,A3
||         LDW     .D2T1   *+SP(4),A4        ; |1162| 

           LDW     .D1T1   *A3,A3            ; |1167| 
           NOP             3
           EXTU    .S1     A4,24,16,A4       ; |1162| 

           CMPEQ   .L1     A3,1,A0           ; |1167| 
||         SET     .S1     A4,28,30,A12      ; |1162| 

   [ A0]   ZERO    .L2     B4                ; |1177| 
|| [!A0]   B       .S2     $C$L77            ; |1167| 
|| [ A0]   MVKL    .S1     _mlb_sram+49024,A4

           NOP             1
   [ A0]   MVKH    .S1     _mlb_sram+49024,A4
   [ A0]   LDW     .D1T1   *A4,A3            ; |1182| 
   [ A0]   ZERO    .L2     B6
   [ A0]   MVKH    .S2     0x80000000,B6
           ; BRANCHCC OCCURS {$C$L77}        ; |1167| 
;** --------------------------------------------------------------------------*
;**   BEGIN LOOP $C$L69
;** --------------------------------------------------------------------------*
$C$L69:    
;**	-----------------------g18:
;* 1177	-----------------------    timeout = 0u;
           NOP             2
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*----------------------------------------------------------------------------*
$C$L70:    
;**	-----------------------g19:
;* 1182	-----------------------    ctlFC = ((volatile unsigned *)mlb_sram)[12256];
;* 1186	-----------------------    asm(" NOP\n");
;* 1187	-----------------------    asm(" NOP\n");
;* 1188	-----------------------    asm(" NOP\n");
;* 1189	-----------------------    asm(" NOP\n");
;* 1190	-----------------------    asm(" NOP\n");
;* 1191	-----------------------    asm(" NOP\n");
;* 1192	-----------------------    asm(" NOP\n");
;* 1193	-----------------------    asm(" NOP\n");
;* 1199	-----------------------    if ( !((ctlFC != 1u)|((++timeout) >= 0x80000000u)) ) goto g19;
;** --------------------------------------------------------------------------*
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP

           CMPEQ   .L1     A3,1,A3           ; |1199| 
||         ADD     .L2     1,B4,B4           ; |1199| 

           CMPLTU  .L2     B4,B6,B5          ; |1199| 
           AND     .L2X    A3,B5,B0

   [ B0]   B       .S1     $C$L70            ; |1199| 
|| [ B0]   LDW     .D1T1   *A4,A3            ; |1182| 
|| [!B0]   CMPLTU  .L2     B4,B6,B0          ; |1203| 

           NOP             5
           ; BRANCHCC OCCURS {$C$L70}        ; |1199| 
;** --------------------------------------------------------------------------*
;* 1203	-----------------------    if ( timeout >= 0x80000000u ) goto g27;

   [!B0]   B       .S1     $C$L72            ; |1203| 
|| [ B0]   MV      .L1     A4,A3

   [ B0]   LDW     .D1T1   *A3,A3            ; |1205| 
   [!B0]   MVK     .L1     1,A3              ; |1298| 
   [!B0]   MVKL    .S1     _mlb_sram+49088,A4
   [!B0]   MVKH    .S1     _mlb_sram+49088,A4
   [!B0]   STW     .D1T1   A3,*A4            ; |1298| 
           ; BRANCHCC OCCURS {$C$L72}        ; |1203| 
;** --------------------------------------------------------------------------*
;* 1205	-----------------------    if ( ((volatile unsigned *)mlb_sram)[12256] != 2u ) goto g28;
           CMPEQ   .L1     A3,2,A0           ; |1205| 

   [ A0]   LDW     .D1T1   *+A11(8),A3       ; |1209| 
|| [!A0]   B       .S1     $C$L73            ; |1205| 
||         MV      .L1     A0,A1             ; guard predicate rewrite

           NOP             3
   [ A1]   MVK     .L2     1,B5              ; |1285| 
           CMPEQ   .L1     0,A3,A0           ; |1209| 
           ; BRANCHCC OCCURS {$C$L73}        ; |1205| 
;** --------------------------------------------------------------------------*
;* 1209	-----------------------    if ( NULL != (*comp).fxns.exec_fc ) goto g24;
;* 1285	-----------------------    ((volatile unsigned *)mlb_sram)[12272] = 1u;
;* 1285	-----------------------    goto g18;

   [ A0]   MVK     .S2     64,B4
|| [ A0]   B       .S1     $C$L69            ; |1285| 
|| [!A0]   ADD     .L1     4,A4,A3
|| [ A0]   ZERO    .L2     B6
|| [!A0]   ADD     .D2X    8,A4,B4

   [ A0]   ADD     .L2X    A4,B4,B4
|| [ A0]   MVKL    .S1     _mlb_sram+49024,A4
|| [!A0]   LDW     .D1T1   *A3,A3            ; |1217| 
|| [ A0]   MVKH    .S2     0x80000000,B6

   [ A0]   MVKH    .S1     _mlb_sram+49024,A4
|| [ A0]   STW     .D2T2   B5,*B4            ; |1285| 

   [ A0]   LDW     .D1T1   *A4,A3            ; |1182| 
   [!A0]   ADD     .L2X    12,A4,B6
   [ A0]   ZERO    .L2     B4                ; |1177| 
           ; BRANCHCC OCCURS {$C$L69}        ; |1285| 
;** --------------------------------------------------------------------------*
;**	-----------------------g24:
;* 1217	-----------------------    cmdFC = ((volatile unsigned *)mlb_sram)[12257]>>16u;
;* 1222	-----------------------    errFC = (*(*comp).fxns.exec_fc)(cmdFC, ((volatile unsigned *)mlb_sram)[12258], ((volatile unsigned *)mlb_sram)[12259], &r1FC, &r2FC);
;* 1230	-----------------------    ((volatile unsigned *)mlb_sram)[12274] = r1FC;
;* 1231	-----------------------    ((volatile unsigned *)mlb_sram)[12275] = r2FC;
;* 1233	-----------------------    ((volatile unsigned *)mlb_sram)[4] = errFC;
;* 1238	-----------------------    ((volatile unsigned *)mlb_sram)[12272] = 3u;
;* 1240	-----------------------    timeout = 0u;

           SHRU    .S1     A3,16,A4          ; |1217| 
||         LDW     .D1T1   *+A11(8),A3       ; |1222| 

           LDW     .D2T2   *B4,B4            ; |1222| 
           LDW     .D2T1   *B6,A6            ; |1222| 
           ADDAW   .D2     SP,4,B5           ; |1222| 
           ADD     .L2     12,SP,B6          ; |1222| 
           CALL    .S2X    A3                ; |1222| 
           ADDKPC  .S2     $C$RL63,B3,3      ; |1222| 
           MV      .L1X    B5,A8             ; |1222| 
$C$RL63:   ; CALL OCCURS {A3} {0}            ; |1222| 
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*----------------------------------------------------------------------------*
;**	-----------------------g25:
;* 1245	-----------------------    ctlFC = ((volatile unsigned *)mlb_sram)[12256];
;* 1249	-----------------------    asm(" NOP\n");
;* 1250	-----------------------    asm(" NOP\n");
;* 1251	-----------------------    asm(" NOP\n");
;* 1252	-----------------------    asm(" NOP\n");
;* 1253	-----------------------    asm(" NOP\n");
;* 1254	-----------------------    asm(" NOP\n");
;* 1255	-----------------------    asm(" NOP\n");
;* 1256	-----------------------    asm(" NOP\n");
;* 1262	-----------------------    if ( !((ctlFC == 1u)|((++timeout) >= 0x80000000u)) ) goto g25;
           LDW     .D2T2   *+SP(12),B4       ; |1230| 
           MVKL    .S1     _mlb_sram+49096,A5
           MVKH    .S1     _mlb_sram+49096,A5
           MVKL    .S1     _mlb_sram+16,A3
           SUBAW   .D1     A5,2,A6
           STW     .D1T2   B4,*A5            ; |1230| 
           LDW     .D2T2   *+SP(16),B4       ; |1231| 
           ADD     .L2X    4,A5,B6
           MVKH    .S1     _mlb_sram+16,A3
           SUBAW   .D1     A6,16,A5
           MVK     .L1     3,A31             ; |1238| 
           STW     .D2T2   B4,*B6            ; |1231| 
           STW     .D1T1   A4,*A3            ; |1233| 
           STW     .D1T1   A31,*A6           ; |1238| 
           LDW     .D1T1   *A5,A3            ; |1245| 
           ZERO    .L2     B5

           ZERO    .L2     B4                ; |1240| 
||         MVKH    .S2     0x80000000,B5

;** --------------------------------------------------------------------------*
;**   BEGIN LOOP $C$L71
;** --------------------------------------------------------------------------*
$C$L71:    
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
           ADD     .L2     1,B4,B4           ; |1262| 
           CMPLTU  .L2     B4,B5,B0          ; |1262| 

   [ B0]   CMPEQ   .L1     A3,1,A0           ; |1262| 
|| [!B0]   MVK     .S1     1,A0              ; |1262| 

   [!A0]   B       .S1     $C$L71            ; |1262| 
|| [!A0]   LDW     .D1T1   *A5,A3            ; |1245| 
|| [ A0]   CMPEQ   .L2     B4,B5,B0          ; |1271| 

           NOP             5
           ; BRANCHCC OCCURS {$C$L71}        ; |1262| 
;** --------------------------------------------------------------------------*
;* 1266	-----------------------    ((volatile unsigned *)mlb_sram)[12272] = 1u;
;* 1271	-----------------------    if ( timeout != 0x80000000u ) goto g18;

   [!B0]   ZERO    .L2     B4                ; |1177| 
||         MVK     .L1     1,A3              ; |1266| 
||         MV      .S1     A6,A4
|| [!B0]   B       .S2     $C$L69            ; |1271| 

   [ B0]   B       .S2     $C$L74            ; |1271| 
||         STW     .D1T1   A3,*A4            ; |1266| 
|| [!B0]   MVKL    .S1     _mlb_sram+49024,A4

   [!B0]   MVKH    .S1     _mlb_sram+49024,A4
   [!B0]   LDW     .D1T1   *A4,A3            ; |1182| 
   [!B0]   ZERO    .L2     B6
   [!B0]   MVKH    .S2     0x80000000,B6
           ; BRANCHCC OCCURS {$C$L69}        ; |1271| 
;** --------------------------------------------------------------------------*
;* 1271	-----------------------    goto g28;

           B       .S2     $C$L77            ; |1304| 
||         MVKL    .S1     _mlb_sram+49088,A4
||         ZERO    .L1     A3                ; |1304| 

           ; BRANCH OCCURS {$C$L74}          ; |1271| 
;** --------------------------------------------------------------------------*
$C$L72:    
;**	-----------------------g27:
;* 1298	-----------------------    ((volatile unsigned *)mlb_sram)[12272] = 1u;
;** --------------------------------------------------------------------------*
$C$L73:    

           B       .S2     $C$L77            ; |1304| 
||         ZERO    .L1     A3                ; |1304| 
||         MVKL    .S1     _mlb_sram+49088,A4

;** --------------------------------------------------------------------------*
$C$L74:    
;**	-----------------------g28:
;* 1304	-----------------------    ((volatile unsigned *)mlb_sram)[12272] = 0u;
;* 1304	-----------------------    goto g31;
           MVKH    .S1     _mlb_sram+49088,A4
           STW     .D1T1   A3,*A4            ; |1304| 
           NOP             3
           ; BRANCH OCCURS {$C$L77}          ; |1304| 
;** --------------------------------------------------------------------------*
$C$L75:    
;**	-----------------------g29:
;* 1311	-----------------------    ((volatile unsigned *)mlb_sram)[4] = err;
;* 1316	-----------------------    rpcDebug = (err&0xffu)<<16|(unsigned)((int)*(unsigned short *)((volatile unsigned *)mlb_sram)[1]<<8)|0x30000000u;
;* 1316	-----------------------    goto g31;

           STW     .D2T1   A0,*B4            ; |1311| 
||         SUB     .L1X    B5,A3,A3

           LDW     .D1T1   *A3,A3            ; |1316| 
           EXTU    .S1     A0,24,8,A4        ; |1316| 
           NOP             3
           LDHU    .D1T1   *A3,A3            ; |1316| 
           NOP             1
           BNOP    .S1     $C$L78,2          ; |1316| 

           CALL    .S2     _loc_debug        ; |1344| 
||         SHL     .S1     A3,8,A3           ; |1316| 

           OR      .L1     A3,A4,A3          ; |1316| 
           SET     .S1     A3,28,29,A12      ; |1316| 
           ; BRANCH OCCURS {$C$L78}          ; |1316| 
;** --------------------------------------------------------------------------*
$C$L76:    
;**	-----------------------g30:
;* 1328	-----------------------    rpcDebug = 0x10000000u;
;** --------------------------------------------------------------------------*
$C$L77:    
           CALL    .S1     _loc_debug        ; |1344| 
           NOP             2
;** --------------------------------------------------------------------------*
$C$L78:    
;**	-----------------------g31:
;* 1344	-----------------------    loc_debug(rpcDebug|0x7000006u);
;* 1355	-----------------------    mlb_send_to_gpp(~mlb_inbox[0]);
;* 1358	-----------------------    loc_debug(rpcDebug|0x7000007u);
;* 1360	-----------------------    iterCount = 0u;
           MVKL    .S1     0x7000006,A3
           MVKH    .S1     0x7000006,A3

           OR      .L1     A3,A12,A4         ; |1344| 
||         ADDKPC  .S2     $C$RL64,B3,0      ; |1344| 

$C$RL64:   ; CALL OCCURS {_loc_debug} {0}    ; |1344| 
;** --------------------------------------------------------------------------*
           MVKL    .S1     _mlb_inbox,A3
           MVKH    .S1     _mlb_inbox,A3
           LDW     .D1T1   *A3,A3            ; |1355| 
           NOP             4

           CALLP   .S2     _mlb_send_to_gpp,B3
||         NOT     .L1     A3,A4             ; |1355| 

$C$RL65:   ; CALL OCCURS {_mlb_send_to_gpp} {0}  ; |1355| 
           MVKL    .S2     0x7000007,B4
           MVKH    .S2     0x7000007,B4
           NOP             1

           CALLP   .S2     _loc_debug,B3
||         OR      .L1X    B4,A12,A4         ; |1358| 

$C$RL66:   ; CALL OCCURS {_loc_debug} {0}    ; |1358| 
;** --------------------------------------------------------------------------*
           ZERO    .L1     A11               ; |1360| 
;** --------------------------------------------------------------------------*
$C$L79:    

           B       .S2     $C$L68            ; |1378| 
||         MVKL    .S1     _mlb_sram+24,A3
||         ADD     .L1     1,A11,A11         ; |1372| 

           NOP             1
           MVKH    .S1     _mlb_sram+24,A3
           STW     .D1T1   A11,*A3           ; |1372| 
;** --------------------------------------------------------------------------*
$C$L80:    
;**	-----------------------g32:
;* 1372	-----------------------    ((volatile unsigned *)mlb_sram)[6] = ++iterCount;
;* 1378	-----------------------    goto g12;
           NOP             2
           ; BRANCH OCCURS {$C$L68}          ; |1378| 
	.sect	".text"
	.clink
	.global	_mlb_component_register

;******************************************************************************
;* FUNCTION NAME: mlb_component_register                                      *
;*                                                                            *
;*   Regs Modified     : A0,A1,A3,A4,A5,A6,B0,B1,B3,B4,B5,B6,B7,A30,A31,B30,  *
;*                           B31                                              *
;*   Regs Used         : A0,A1,A3,A4,A5,A6,B0,B1,B3,B4,B5,B6,B7,DP,SP,A30,A31,*
;*                           B30,B31                                          *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_mlb_component_register:
;** --------------------------------------------------------------------------*
;* 1390	-----------------------    if ( !_compId ) goto g9;

           CMPEQ   .L2     0,B4,B1           ; |1392| 
||         MV      .L1     A4,A0             ; |1387| 
||         MV      .S1X    B3,A1             ; |1387| 
||         ZERO    .D1     A3                ; |1428| 

   [!A0]   ZERO    .L2     B1                ; |1394| nullify predicate
|| [ A0]   LDW     .D2T2   *+DP(_num_core_components),B5 ; |1394| 
|| [!A0]   B       .S1     $C$L81            ; |1390| 
|| [ A0]   MVK     .S2     16,B6             ; |1394| 

   [ B1]   BNOP    .S1     $C$L81,3          ; |1392| 
   [ A0]   CMPLTU  .L2     B5,B6,B0          ; |1394| 
           ; BRANCHCC OCCURS {$C$L81}        ; |1390| 
;** --------------------------------------------------------------------------*
;* 1392	-----------------------    if ( NULL == _comp ) goto g8;
           NOP             1
           ; BRANCHCC OCCURS {$C$L81}        ; |1392| 
;** --------------------------------------------------------------------------*
;* 1394	-----------------------    if ( num_core_components >= 16u ) goto g7;

   [!B0]   B       .S1     $C$L81            ; |1394| 
|| [ B0]   LDW     .D2T2   *+B4(4),B31       ; |1396| 

   [ B0]   LDW     .D2T2   *+DP(_num_core_components),B5 ; |1398| 
   [ B0]   MVK     .S2     52,B6             ; |1398| 
           NOP             3
           ; BRANCHCC OCCURS {$C$L81}        ; |1394| 
;** --------------------------------------------------------------------------*
;* 1396	-----------------------    if ( NULL != (*_comp).fxns.exec ) goto g6;
;* 1410	-----------------------    ret = 0;
;* 1410	-----------------------    goto g10;

           CMPEQ   .L2     0,B31,B0          ; |1396| 
||         MPYLI   .M2     B6,B5,B7:B6       ; |1398| 
||         MVKL    .S1     _components,A3
||         MVK     .S2     52,B5             ; |1400| 

   [ B0]   B       .S2     $C$L82            ; |1410| 
||         MVKH    .S1     _components,A3

   [!B0]   CALL    .S2     __strasgi_64plus  ; |1398| 
||         ADDAD   .D1     A3,5,A5
||         MVK     .S1     0x34,A6           ; |1398| 

   [ B0]   RETNOP  .S2X    A1,1              ; |1432| 

           ADD     .L1X    A3,B6,A4          ; |1398| 
||         ZERO    .S1     A3                ; |1410| 

   [ B0]   MV      .L1     A3,A4             ; |1431| 
           ; BRANCHCC OCCURS {$C$L82}        ; |1410| 
;** --------------------------------------------------------------------------*
;**	-----------------------g6:
;* 1398	-----------------------    components[num_core_components] = *_comp;
;* 1400	-----------------------    (components[num_core_components]).component_id = _compId;
;* 1402	-----------------------    ++num_core_components;
;* 1405	-----------------------    ret = 1;
;* 1406	-----------------------    goto g10;
;**	-----------------------g7:
;* 1416	-----------------------    ret = 0;
;* 1416	-----------------------    goto g10;
;**	-----------------------g8:
;* 1422	-----------------------    ret = 0;
;* 1422	-----------------------    goto g10;
;**	-----------------------g9:
;* 1428	-----------------------    ret = 0;
           ADDKPC  .S2     $C$RL67,B3,0      ; |1398| 
$C$RL67:   ; CALL OCCURS {__strasgi_64plus} {0}  ; |1398| 
;** --------------------------------------------------------------------------*
           LDW     .D2T2   *+DP(_num_core_components),B4 ; |1400| 
           NOP             4
           MPYLI   .M2     B5,B4,B5:B4       ; |1400| 
           NOP             4
           ADD     .L1X    A5,B4,A3          ; |1400| 
           STW     .D1T1   A0,*A3            ; |1400| 
           LDW     .D2T2   *+DP(_num_core_components),B4 ; |1402| 
           MVK     .L1     0x1,A3            ; |1405| 
           NOP             3
           ADD     .L2     1,B4,B4           ; |1402| 
           STW     .D2T2   B4,*+DP(_num_core_components) ; |1402| 
;** --------------------------------------------------------------------------*
$C$L81:    
           RETNOP  .S2X    A1,2              ; |1432| 
           MV      .L1     A3,A4             ; |1431| 
;** --------------------------------------------------------------------------*
$C$L82:    
;**	-----------------------g10:
;* 1431	-----------------------    return ret;
           NOP             2
           ; BRANCH OCCURS {A1}              ; |1432| 
	.sect	".text"
	.clink
	.global	_mlb_debug_usr

;******************************************************************************
;* FUNCTION NAME: mlb_debug_usr                                               *
;*                                                                            *
;*   Regs Modified     : A3,A5                                                *
;*   Regs Used         : A3,A4,A5,B3,B4                                       *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_mlb_debug_usr:
;** --------------------------------------------------------------------------*
;* 1438	-----------------------    ((volatile unsigned *)mlb_sram)[(_idx&3u)+8] = _val;
;**  	-----------------------    return;
           RETNOP  .S2     B3,2              ; |1439| 
           MVKL    .S1     _mlb_sram+32,A5

           MVKH    .S1     _mlb_sram+32,A5
||         AND     .L1     3,A4,A3           ; |1438| 

           STW     .D1T2   B4,*+A5[A3]       ; |1438| 
           ; BRANCH OCCURS {B3}              ; |1439| 
	.sect	".text"
	.clink
	.global	_mlb_fastcall_initiate

;******************************************************************************
;* FUNCTION NAME: mlb_fastcall_initiate                                       *
;*                                                                            *
;*   Regs Modified     : A3,A4                                                *
;*   Regs Used         : A3,A4,B3                                             *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_mlb_fastcall_initiate:
;** --------------------------------------------------------------------------*
;* 1447	-----------------------    ((volatile unsigned *)mlb_sram)[12272] = 1u;
;**  	-----------------------    return;
           RETNOP  .S2     B3,2              ; |1452| 
           MVKL    .S1     _mlb_sram+49088,A4

           MVKH    .S1     _mlb_sram+49088,A4
||         MVK     .L1     1,A3              ; |1447| 

           STW     .D1T1   A3,*A4            ; |1447| 
           ; BRANCH OCCURS {B3}              ; |1452| 
	.sect	".text"
	.clink
	.global	_mlb_panic

;******************************************************************************
;* FUNCTION NAME: mlb_panic                                                   *
;*                                                                            *
;*   Regs Modified     : A3,B4                                                *
;*   Regs Used         : A3,B4                                                *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_mlb_panic:
;** --------------------------------------------------------------------------*
;* 1459	-----------------------    ((volatile unsigned *)mlb_sram)[4] = 0xbaadf00du;

           MVKL    .S2     0xbaadf00d,B4
||         MVKL    .S1     _mlb_sram+16,A3

           MVKH    .S2     0xbaadf00d,B4
||         MVKH    .S1     _mlb_sram+16,A3

           STW     .D1T2   B4,*A3            ; |1459| 
;*----------------------------------------------------------------------------*
;*   SOFTWARE PIPELINE INFORMATION
;*      Disqualified loop: Software pipelining disabled
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Loop contains a call to asm()
;*      Disqualified loop: Bad loop structure
;*----------------------------------------------------------------------------*
$C$L83:    
;**	-----------------------g2:
;* 1465	-----------------------    asm(" IDLE\n");
;* 1466	-----------------------    asm(" NOP\n");
;* 1467	-----------------------    asm(" NOP\n");
;* 1468	-----------------------    asm(" NOP\n");
;* 1469	-----------------------    asm(" NOP\n");
;* 1470	-----------------------    asm(" NOP\n");
;* 1471	-----------------------    asm(" NOP\n");
;* 1472	-----------------------    asm(" NOP\n");
;* 1473	-----------------------    goto g2;
 IDLE
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
           B       .S1     $C$L83            ; |1473| 
           NOP             5
           ; BRANCH OCCURS {$C$L83}          ; |1473| 
	.sect	".text"
	.clink
	.global	_mlb_resume

;******************************************************************************
;* FUNCTION NAME: mlb_resume                                                  *
;*                                                                            *
;*   Regs Modified     : A3,A4                                                *
;*   Regs Used         : A3,A4,B3                                             *
;*   Local Frame Size  : 0 Args + 0 Auto + 0 Save = 0 byte                    *
;******************************************************************************
_mlb_resume:
;** --------------------------------------------------------------------------*
;* 1479	-----------------------    return ((volatile unsigned *)mlb_sram)[1] == 0xffffffffu;
           MVKL    .S1     _mlb_sram+4,A3
           MVKH    .S1     _mlb_sram+4,A3

           RETNOP  .S2     B3,3              ; |1481| 
||         LDW     .D1T1   *A3,A3            ; |1479| 

           MVK     .L1     -1,A4             ; |1479| 
           CMPEQ   .L1     A3,A4,A4          ; |1479| 
           ; BRANCH OCCURS {B3}              ; |1481| 
	.sect	".text"
	.clink
	.global	_mlb_start

;******************************************************************************
;* FUNCTION NAME: mlb_start                                                   *
;*                                                                            *
;*   Regs Modified     : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,SP,A16,A17,A18,A19,A20,A21,A22,A23,A24, *
;*                           A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19,B20, *
;*                           B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31      *
;*   Regs Used         : A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,  *
;*                           B7,B8,B9,DP,SP,A16,A17,A18,A19,A20,A21,A22,A23,  *
;*                           A24,A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19, *
;*                           B20,B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31  *
;*   Local Frame Size  : 8 Args + 0 Auto + 4 Save = 12 byte                   *
;******************************************************************************
_mlb_start:
;** --------------------------------------------------------------------------*
;* 1491	-----------------------    mlb_task_attrs = TSK_ATTRS;
;* 1492	-----------------------    mlb_task_attrs.name = "mlb";
;* 1493	-----------------------    mlb_task_attrs.priority = 1;
;* 1495	-----------------------    TSK_create((int (*)())&mlb_task__entry, &mlb_task_attrs);
;**  	-----------------------    return;
           MVKL    .S1     _TSK_ATTRS,A3

           MVKH    .S1     _TSK_ATTRS,A3
||         STW     .D2T2   B3,*SP--(16)      ; |1485| 

           LDW     .D1T1   *+A3(24),A5       ; |1491| 
           LDNDW   .D1T1   *+A3(16),A7:A6    ; |1491| 

           LDNDW   .D1T1   *+A3(8),A9:A8     ; |1491| 
||         MVKL    .S2     _mlb_task_attrs,B4

           LDNDW   .D1T1   *A3,A17:A16       ; |1491| 
||         MVKH    .S2     _mlb_task_attrs,B4

           ADDAW   .D2     B4,5,B7
           STW     .D2T1   A5,*+B4(24)       ; |1491| 
           STNDW   .D2T1   A7:A6,*+B4(16)    ; |1491| 

           MVKL    .S1     $C$SL1+0,A18
||         STNDW   .D2T1   A9:A8,*+B4(8)     ; |1491| 

           STNDW   .D2T1   A17:A16,*B4       ; |1491| 
||         MV      .L2     B4,B5             ; |1492| 
||         MVKH    .S1     $C$SL1+0,A18

           MV      .L2     B4,B6             ; |1492| 
||         MVK     .S2     1,B4              ; |1493| 
||         STW     .D2T1   A18,*B7           ; |1492| 

           STW     .D2T2   B4,*B6            ; |1493| 
||         MVKL    .S1     _mlb_task__entry,A4

           CALLP   .S2     _TSK_create,B3
||         STW     .D2T2   B5,*+SP(4)        ; |1495| 
||         MVKH    .S1     _mlb_task__entry,A4

$C$RL68:   ; CALL OCCURS {_TSK_create} {0}   ; |1495| 
;** --------------------------------------------------------------------------*
           LDW     .D2T2   *++SP(16),B3      ; |1496| 
           NOP             4
           RETNOP  .S2     B3,5              ; |1496| 
           ; BRANCH OCCURS {B3}              ; |1496| 
;; Inlined function references:
;; [  5] strlen
;; [  9] strncmp
;******************************************************************************
;* STRINGS                                                                    *
;******************************************************************************
	.sect	".const:.string"
$C$SL1:	.string	"mlb",0
;*****************************************************************************
;* UNDEFINED EXTERNAL REFERENCES                                             *
;*****************************************************************************
	.global	_memcpy
	.global	_snprintf
	.global	_vsnprintf
	.global	_strstr
	.global	_memset
	.global	_HWI_dispatchPlug
	.global	_HWI_eventMap
	.global	_HWI_disable
	.global	_HWI_enable
	.global	_TSK_create
	.global	_BCACHE_wait
	.global	_BCACHE_inv
	.global	_BCACHE_wb
	.global	_BCACHE_wbInv
	.global	_BCACHE_invL1pAll
	.global	_BCACHE_wbAll
	.global	_BCACHE_wbInvAll
	.global	_C64_enableIER
	.global	_C64_clearIFR
	.global	_int_event_clear
	.global	_int_irq_clear
	.global	_core_components_register
	.global	_qdma_init
	.global	_qdma_wait
	.global	_qdma_copy1d
	.global	_qdma_copy2d
	.global	_qdma_link1d
	.global	_qdma_link2d
	.global	_TSK_ATTRS
	.global	_dsp_config
	.global	__strasgi_64plus

;******************************************************************************
;* BUILD ATTRIBUTES                                                           *
;******************************************************************************
	.battr "TI", Tag_File, 1, Tag_ABI_stack_align_needed(0)
	.battr "TI", Tag_File, 1, Tag_ABI_stack_align_preserved(0)
	.battr "TI", Tag_File, 1, Tag_Tramps_Use_SOC(1)
